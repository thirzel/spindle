<?php

// Data functions for table code_chrev_scenes

// This script and data application were generated by AppGini 5.31
// Download AppGini for free from http://bigprof.com/appgini/download/

function code_chrev_scenes_insert(){
	global $Translation;

	if($_GET['insert_x']!=''){$_POST=$_GET;}

	// mm: can member insert record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	if(!$arrPerm[1]){
		return false;
	}

	$data['author'] = makeSafe($_POST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_POST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_POST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_POST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_POST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['agent'] = makeSafe($_POST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['invivo_code'] = makeSafe($_POST['invivo_code']);
		if($data['invivo_code'] == empty_lookup_value){ $data['invivo_code'] = ''; }
	$data['startdate'] = makeSafe($_POST['invivo_code']);
		if($data['startdate'] == empty_lookup_value){ $data['startdate'] = ''; }
	$data['end_date'] = makeSafe($_POST['invivo_code']);
		if($data['end_date'] == empty_lookup_value){ $data['end_date'] = ''; }
	$data['person'] = makeSafe($_POST['invivo_code']);
		if($data['person'] == empty_lookup_value){ $data['person'] = ''; }
	$data['place'] = makeSafe($_POST['invivo_code']);
		if($data['place'] == empty_lookup_value){ $data['place'] = ''; }
	$data['freecode'] = makeSafe($_POST['invivo_code']);
		if($data['freecode'] == empty_lookup_value){ $data['freecode'] = ''; }
	$data['herme_code'] = makeSafe($_POST['herme_code']);
		if($data['herme_code'] == empty_lookup_value){ $data['herme_code'] = ''; }
	$data['impression'] = makeSafe($_POST['herme_code']);
		if($data['impression'] == empty_lookup_value){ $data['impression'] = ''; }
	$data['noetictension'] = makeSafe($_POST['herme_code']);
		if($data['noetictension'] == empty_lookup_value){ $data['noetictension'] = ''; }
	$data['comment'] = makeSafe($_POST['herme_code']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }
	$data['scene'] = makeSafe($_POST['scene']);
		if($data['scene'] == empty_lookup_value){ $data['scene'] = ''; }
	if($data['startdate'] == '') $data['startdate'] = "1";
	if($data['end_date'] == '') $data['end_date'] = "1";

	// hook: code_chrev_scenes_before_insert
	if(function_exists('code_chrev_scenes_before_insert')){
		$args=array();
		if(!code_chrev_scenes_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('insert into `code_chrev_scenes` set       `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `invivo_code`=' . (($data['invivo_code'] !== '' && $data['invivo_code'] !== NULL) ? "'{$data['invivo_code']}'" : 'NULL') . ', `startdate`=' . (($data['startdate'] !== '' && $data['startdate'] !== NULL) ? "'{$data['startdate']}'" : 'NULL') . ', `end_date`=' . (($data['end_date'] !== '' && $data['end_date'] !== NULL) ? "'{$data['end_date']}'" : 'NULL') . ', `person`=' . (($data['person'] !== '' && $data['person'] !== NULL) ? "'{$data['person']}'" : 'NULL') . ', `place`=' . (($data['place'] !== '' && $data['place'] !== NULL) ? "'{$data['place']}'" : 'NULL') . ', `freecode`=' . (($data['freecode'] !== '' && $data['freecode'] !== NULL) ? "'{$data['freecode']}'" : 'NULL') . ', `herme_code`=' . (($data['herme_code'] !== '' && $data['herme_code'] !== NULL) ? "'{$data['herme_code']}'" : 'NULL') . ', `impression`=' . (($data['impression'] !== '' && $data['impression'] !== NULL) ? "'{$data['impression']}'" : 'NULL') . ', `noetictension`=' . (($data['noetictension'] !== '' && $data['noetictension'] !== NULL) ? "'{$data['noetictension']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `scene`=' . (($data['scene'] !== '' && $data['scene'] !== NULL) ? "'{$data['scene']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"code_chrev_scenes_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID=db_insert_id(db_link());

	// hook: code_chrev_scenes_after_insert
	if(function_exists('code_chrev_scenes_after_insert')){
		$res = sql("select * from `code_chrev_scenes` where `id`='" . makeSafe($recID) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID);
		$args=array();
		if(!code_chrev_scenes_after_insert($data, getMemberInfo(), $args)){ return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID); }
	}

	// mm: save ownership data
	sql("insert into membership_userrecords set tableName='code_chrev_scenes', pkValue='$recID', memberID='".getLoggedMemberID()."', dateAdded='".time()."', dateUpdated='".time()."', groupID='".getLoggedGroupID()."'", $eo);

	return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID);
}

function code_chrev_scenes_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: code_chrev_scenes_before_delete
	if(function_exists('code_chrev_scenes_before_delete')){
		$args=array();
		if(!code_chrev_scenes_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	sql("delete from `code_chrev_scenes` where `id`='$selected_id'", $eo);

	// hook: code_chrev_scenes_after_delete
	if(function_exists('code_chrev_scenes_after_delete')){
		$args=array();
		code_chrev_scenes_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'", $eo);
}

function code_chrev_scenes_update($selected_id){
	global $Translation;

	if($_GET['update_x']!=''){$_POST=$_GET;}

	// mm: can member edit record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['author'] = makeSafe($_POST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_POST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_POST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_POST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_POST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['agent'] = makeSafe($_POST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['invivo_code'] = makeSafe($_POST['invivo_code']);
		if($data['invivo_code'] == empty_lookup_value){ $data['invivo_code'] = ''; }
	$data['startdate'] = makeSafe($_POST['invivo_code']);
		if($data['startdate'] == empty_lookup_value){ $data['startdate'] = ''; }
	$data['end_date'] = makeSafe($_POST['invivo_code']);
		if($data['end_date'] == empty_lookup_value){ $data['end_date'] = ''; }
	$data['person'] = makeSafe($_POST['invivo_code']);
		if($data['person'] == empty_lookup_value){ $data['person'] = ''; }
	$data['place'] = makeSafe($_POST['invivo_code']);
		if($data['place'] == empty_lookup_value){ $data['place'] = ''; }
	$data['freecode'] = makeSafe($_POST['invivo_code']);
		if($data['freecode'] == empty_lookup_value){ $data['freecode'] = ''; }
	$data['herme_code'] = makeSafe($_POST['herme_code']);
		if($data['herme_code'] == empty_lookup_value){ $data['herme_code'] = ''; }
	$data['impression'] = makeSafe($_POST['herme_code']);
		if($data['impression'] == empty_lookup_value){ $data['impression'] = ''; }
	$data['noetictension'] = makeSafe($_POST['herme_code']);
		if($data['noetictension'] == empty_lookup_value){ $data['noetictension'] = ''; }
	$data['comment'] = makeSafe($_POST['herme_code']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }
	$data['scene'] = makeSafe($_POST['scene']);
		if($data['scene'] == empty_lookup_value){ $data['scene'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: code_chrev_scenes_before_update
	if(function_exists('code_chrev_scenes_before_update')){
		$args=array();
		if(!code_chrev_scenes_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `code_chrev_scenes` set       `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `invivo_code`=' . (($data['invivo_code'] !== '' && $data['invivo_code'] !== NULL) ? "'{$data['invivo_code']}'" : 'NULL') . ', `startdate`=' . (($data['startdate'] !== '' && $data['startdate'] !== NULL) ? "'{$data['startdate']}'" : 'NULL') . ', `end_date`=' . (($data['end_date'] !== '' && $data['end_date'] !== NULL) ? "'{$data['end_date']}'" : 'NULL') . ', `person`=' . (($data['person'] !== '' && $data['person'] !== NULL) ? "'{$data['person']}'" : 'NULL') . ', `place`=' . (($data['place'] !== '' && $data['place'] !== NULL) ? "'{$data['place']}'" : 'NULL') . ', `freecode`=' . (($data['freecode'] !== '' && $data['freecode'] !== NULL) ? "'{$data['freecode']}'" : 'NULL') . ', `herme_code`=' . (($data['herme_code'] !== '' && $data['herme_code'] !== NULL) ? "'{$data['herme_code']}'" : 'NULL') . ', `impression`=' . (($data['impression'] !== '' && $data['impression'] !== NULL) ? "'{$data['impression']}'" : 'NULL') . ', `noetictension`=' . (($data['noetictension'] !== '' && $data['noetictension'] !== NULL) ? "'{$data['noetictension']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `scene`=' . (($data['scene'] !== '' && $data['scene'] !== NULL) ? "'{$data['scene']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="code_chrev_scenes_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: code_chrev_scenes_after_update
	if(function_exists('code_chrev_scenes_after_update')){
		$res = sql("SELECT * FROM `code_chrev_scenes` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!code_chrev_scenes_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function code_chrev_scenes_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('code_chrev_scenes');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_author = thisOr(undo_magic_quotes($_REQUEST['filterer_author']), '');
	$filterer_bibliography = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliography']), '');
	$filterer_transcript = thisOr(undo_magic_quotes($_REQUEST['filterer_transcript']), '');
	$filterer_token_sequence = thisOr(undo_magic_quotes($_REQUEST['filterer_token_sequence']), '');
	$filterer_agent = thisOr(undo_magic_quotes($_REQUEST['filterer_agent']), '');
	$filterer_invivo_code = thisOr(undo_magic_quotes($_REQUEST['filterer_invivo_code']), '');
	$filterer_herme_code = thisOr(undo_magic_quotes($_REQUEST['filterer_herme_code']), '');
	$filterer_scene = thisOr(undo_magic_quotes($_REQUEST['filterer_scene']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliography && !$filterer_author) $filterer_author = sqlValue("select author_name from biblio_doc where id='" . makeSafe($filterer_bibliography) . "'");
	if($filterer_transcript && !$filterer_author) $filterer_author = sqlValue("select author from biblio_trascript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_transcript && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography_title from biblio_trascript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_token_sequence && !$filterer_author) $filterer_author = sqlValue("select author from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_invivo_code && !$filterer_author) $filterer_author = sqlValue("select author from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_token_sequence) $filterer_token_sequence = sqlValue("select token_sequence from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_herme_code && !$filterer_author) $filterer_author = sqlValue("select author from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_token_sequence) $filterer_token_sequence = sqlValue("select token_sequence from code_herme where id='" . makeSafe($filterer_herme_code) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: author
	$combo_author = new DataCombo;
	// combobox: bibliography, filterable by: author
	$combo_bibliography = new DataCombo;
	// combobox: transcript, filterable by: author,bibliography
	$combo_transcript = new DataCombo;
	// combobox: token_sequence, filterable by: author,bibliography,transcript
	$combo_token_sequence = new DataCombo;
	// combobox: agent
	$combo_agent = new DataCombo;
	// combobox: invivo_code, filterable by: author,bibliography,transcript,token_sequence
	$combo_invivo_code = new DataCombo;
	// combobox: herme_code, filterable by: author,bibliography,transcript,token_sequence
	$combo_herme_code = new DataCombo;
	// combobox: scene
	$combo_scene = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `code_chrev_scenes` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found']);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_author->SelectedData = $row['author'];
		$combo_bibliography->SelectedData = $row['bibliography'];
		$combo_transcript->SelectedData = $row['transcript'];
		$combo_token_sequence->SelectedData = $row['token_sequence'];
		$combo_agent->SelectedData = $row['agent'];
		$combo_invivo_code->SelectedData = $row['invivo_code'];
		$combo_herme_code->SelectedData = $row['herme_code'];
		$combo_scene->SelectedData = $row['scene'];
	}else{
		$combo_author->SelectedData = $filterer_author;
		$combo_bibliography->SelectedData = $filterer_bibliography;
		$combo_transcript->SelectedData = $filterer_transcript;
		$combo_token_sequence->SelectedData = $filterer_token_sequence;
		$combo_agent->SelectedData = $filterer_agent;
		$combo_invivo_code->SelectedData = $filterer_invivo_code;
		$combo_herme_code->SelectedData = $filterer_herme_code;
		$combo_scene->SelectedData = $filterer_scene;
	}
	$combo_author->HTML = '<span id="author-container' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '">';
	$combo_author->MatchText = '<span id="author-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '">';
	$combo_bibliography->HTML = '<span id="bibliography-container' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '">';
	$combo_bibliography->MatchText = '<span id="bibliography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '">';
	$combo_transcript->HTML = '<span id="transcript-container' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '">';
	$combo_transcript->MatchText = '<span id="transcript-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '">';
	$combo_token_sequence->HTML = '<span id="token_sequence-container' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '">';
	$combo_token_sequence->MatchText = '<span id="token_sequence-container-readonly' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '">';
	$combo_agent->HTML = '<span id="agent-container' . $rnd1 . '"></span><input type="hidden" name="agent" id="agent' . $rnd1 . '">';
	$combo_agent->MatchText = '<span id="agent-container-readonly' . $rnd1 . '"></span><input type="hidden" name="agent" id="agent' . $rnd1 . '">';
	$combo_invivo_code->HTML = '<span id="invivo_code-container' . $rnd1 . '"></span><input type="hidden" name="invivo_code" id="invivo_code' . $rnd1 . '">';
	$combo_invivo_code->MatchText = '<span id="invivo_code-container-readonly' . $rnd1 . '"></span><input type="hidden" name="invivo_code" id="invivo_code' . $rnd1 . '">';
	$combo_herme_code->HTML = '<span id="herme_code-container' . $rnd1 . '"></span><input type="hidden" name="herme_code" id="herme_code' . $rnd1 . '">';
	$combo_herme_code->MatchText = '<span id="herme_code-container-readonly' . $rnd1 . '"></span><input type="hidden" name="herme_code" id="herme_code' . $rnd1 . '">';
	$combo_scene->HTML = '<span id="scene-container' . $rnd1 . '"></span><input type="hidden" name="scene" id="scene' . $rnd1 . '">';
	$combo_scene->MatchText = '<span id="scene-container-readonly' . $rnd1 . '"></span><input type="hidden" name="scene" id="scene' . $rnd1 . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		var current_author__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author'] : $filterer_author); ?>"};
		var current_bibliography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography'] : $filterer_bibliography); ?>"};
		var current_transcript__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcript'] : $filterer_transcript); ?>"};
		var current_token_sequence__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['token_sequence'] : $filterer_token_sequence); ?>"};
		var current_agent__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['agent'] : $filterer_agent); ?>"};
		var current_invivo_code__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['invivo_code'] : $filterer_invivo_code); ?>"};
		var current_herme_code__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['herme_code'] : $filterer_herme_code); ?>"};
		var current_scene__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['scene'] : $filterer_scene); ?>"};

		jQuery(function() {
			if(typeof(author_reload__RAND__) == 'function') author_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_reload__RAND__) == \'function\') bibliography_reload__RAND__(current_author__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcript_reload__RAND__) == \'function\') transcript_reload__RAND__(current_author__RAND__.value, current_bibliography__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(token_sequence_reload__RAND__) == \'function\') token_sequence_reload__RAND__(current_author__RAND__.value, current_bibliography__RAND__.value, current_transcript__RAND__.value);' : ''); ?>
			if(typeof(agent_reload__RAND__) == 'function') agent_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(invivo_code_reload__RAND__) == \'function\') invivo_code_reload__RAND__(current_author__RAND__.value, current_bibliography__RAND__.value, current_transcript__RAND__.value, current_token_sequence__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(herme_code_reload__RAND__) == \'function\') herme_code_reload__RAND__(current_author__RAND__.value, current_bibliography__RAND__.value, current_transcript__RAND__.value, current_token_sequence__RAND__.value);' : ''); ?>
			if(typeof(scene_reload__RAND__) == 'function') scene_reload__RAND__();
		});
		function author_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#author-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_author__RAND__.value, t: 'code_chrev_scenes', f: 'author' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="author"]').val(resp.results[0].id);
						jQuery('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(current_author__RAND__.value);

						if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_chrev_scenes', f: 'author' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_author__RAND__.value = e.added.id;
				current_author__RAND__.text = e.added.text;
				jQuery('[name="author"]').val(e.added.id);

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(current_author__RAND__.value);

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_author__RAND__.value, t: 'code_chrev_scenes', f: 'author' }
			}).done(function(resp){
				jQuery('[id=author-container__RAND__], [id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function bibliography_reload__RAND__(filterer_author){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#bibliography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, id: current_bibliography__RAND__.value, t: 'code_chrev_scenes', f: 'bibliography' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="bibliography"]').val(resp.results[0].id);
						jQuery('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($F('author'), current_bibliography__RAND__.value);

						if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, s: term, p: page, t: 'code_chrev_scenes', f: 'bibliography' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_bibliography__RAND__.value = e.added.id;
				current_bibliography__RAND__.text = e.added.text;
				jQuery('[name="bibliography"]').val(e.added.id);

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($F('author'), current_bibliography__RAND__.value);

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_bibliography__RAND__.value, t: 'code_chrev_scenes', f: 'bibliography' }
			}).done(function(resp){
				jQuery('[id=bibliography-container__RAND__], [id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function transcript_reload__RAND__(filterer_author, filterer_bibliography){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#transcript-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, id: current_transcript__RAND__.value, t: 'code_chrev_scenes', f: 'transcript' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="transcript"]').val(resp.results[0].id);
						jQuery('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($F('author'), $F('bibliography'), current_transcript__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__($F('author'), $F('bibliography'), current_transcript__RAND__.value);

						if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, s: term, p: page, t: 'code_chrev_scenes', f: 'transcript' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_transcript__RAND__.value = e.added.id;
				current_transcript__RAND__.text = e.added.text;
				jQuery('[name="transcript"]').val(e.added.id);

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($F('author'), $F('bibliography'), current_transcript__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__($F('author'), $F('bibliography'), current_transcript__RAND__.value);

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_transcript__RAND__.value, t: 'code_chrev_scenes', f: 'transcript' }
			}).done(function(resp){
				jQuery('[id=transcript-container__RAND__], [id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function token_sequence_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#token_sequence-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, id: current_token_sequence__RAND__.value, t: 'code_chrev_scenes', f: 'token_sequence' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="token_sequence"]').val(resp.results[0].id);
						jQuery('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');

						if(typeof(invivo_code_reload__RAND__) == 'function') invivo_code_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);
						if(typeof(end_date_reload__RAND__) == 'function') end_date_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);
						if(typeof(herme_code_reload__RAND__) == 'function') herme_code_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);

						if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, s: term, p: page, t: 'code_chrev_scenes', f: 'token_sequence' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_token_sequence__RAND__.value = e.added.id;
				current_token_sequence__RAND__.text = e.added.text;
				jQuery('[name="token_sequence"]').val(e.added.id);

						if(typeof(invivo_code_reload__RAND__) == 'function') invivo_code_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);
						if(typeof(end_date_reload__RAND__) == 'function') end_date_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);
						if(typeof(herme_code_reload__RAND__) == 'function') herme_code_reload__RAND__($F('author'), $F('bibliography'), $F('transcript'), current_token_sequence__RAND__.value);

				if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_token_sequence__RAND__.value, t: 'code_chrev_scenes', f: 'token_sequence' }
			}).done(function(resp){
				jQuery('[id=token_sequence-container__RAND__], [id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');

				if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function agent_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#agent-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_agent__RAND__.value, t: 'code_chrev_scenes', f: 'agent' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="agent"]').val(resp.results[0].id);
						jQuery('[id=agent-container-readonly__RAND__]').html('<span id="agent-match-text">' + resp.results[0].text + '</span>');


						if(typeof(agent_update_autofills__RAND__) == 'function') agent_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_chrev_scenes', f: 'agent' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_agent__RAND__.value = e.added.id;
				current_agent__RAND__.text = e.added.text;
				jQuery('[name="agent"]').val(e.added.id);


				if(typeof(agent_update_autofills__RAND__) == 'function') agent_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_agent__RAND__.value, t: 'code_chrev_scenes', f: 'agent' }
			}).done(function(resp){
				jQuery('[id=agent-container__RAND__], [id=agent-container-readonly__RAND__]').html('<span id="agent-match-text">' + resp.results[0].text + '</span>');

				if(typeof(agent_update_autofills__RAND__) == 'function') agent_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function invivo_code_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript, filterer_token_sequence){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#invivo_code-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, id: current_invivo_code__RAND__.value, t: 'code_chrev_scenes', f: 'invivo_code' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="invivo_code"]').val(resp.results[0].id);
						jQuery('[id=invivo_code-container-readonly__RAND__]').html('<span id="invivo_code-match-text">' + resp.results[0].text + '</span>');


						if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, s: term, p: page, t: 'code_chrev_scenes', f: 'invivo_code' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_invivo_code__RAND__.value = e.added.id;
				current_invivo_code__RAND__.text = e.added.text;
				jQuery('[name="invivo_code"]').val(e.added.id);


				if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_invivo_code__RAND__.value, t: 'code_chrev_scenes', f: 'invivo_code' }
			}).done(function(resp){
				jQuery('[id=invivo_code-container__RAND__], [id=invivo_code-container-readonly__RAND__]').html('<span id="invivo_code-match-text">' + resp.results[0].text + '</span>');

				if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function herme_code_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript, filterer_token_sequence){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#herme_code-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, id: current_herme_code__RAND__.value, t: 'code_chrev_scenes', f: 'herme_code' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="herme_code"]').val(resp.results[0].id);
						jQuery('[id=herme_code-container-readonly__RAND__]').html('<span id="herme_code-match-text">' + resp.results[0].text + '</span>');


						if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, s: term, p: page, t: 'code_chrev_scenes', f: 'herme_code' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_herme_code__RAND__.value = e.added.id;
				current_herme_code__RAND__.text = e.added.text;
				jQuery('[name="herme_code"]').val(e.added.id);


				if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_herme_code__RAND__.value, t: 'code_chrev_scenes', f: 'herme_code' }
			}).done(function(resp){
				jQuery('[id=herme_code-container__RAND__], [id=herme_code-container-readonly__RAND__]').html('<span id="herme_code-match-text">' + resp.results[0].text + '</span>');

				if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function scene_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#scene-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_scene__RAND__.value, t: 'code_chrev_scenes', f: 'scene' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="scene"]').val(resp.results[0].id);
						jQuery('[id=scene-container-readonly__RAND__]').html('<span id="scene-match-text">' + resp.results[0].text + '</span>');


						if(typeof(scene_update_autofills__RAND__) == 'function') scene_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_chrev_scenes', f: 'scene' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_scene__RAND__.value = e.added.id;
				current_scene__RAND__.text = e.added.text;
				jQuery('[name="scene"]').val(e.added.id);


				if(typeof(scene_update_autofills__RAND__) == 'function') scene_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_scene__RAND__.value, t: 'code_chrev_scenes', f: 'scene' }
			}).done(function(resp){
				jQuery('[id=scene-container__RAND__], [id=scene-container-readonly__RAND__]').html('<span id="scene-match-text">' + resp.results[0].text + '</span>');

				if(typeof(scene_update_autofills__RAND__) == 'function') scene_update_autofills__RAND__();
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$templateCode = @file_get_contents('./templates/code_chrev_scenes_templateDVP.html');
	}else{
		$templateCode = @file_get_contents('./templates/code_chrev_scenes_templateDV.html');
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return code_chrev_scenes_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return code_chrev_scenes_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'window.parent.jQuery(\'.modal\').modal(\'hide\'); return false;';
	}else{
		$backAction = '$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode=str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return code_chrev_scenes_validateData();"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#author').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#agent').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#agent_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#invivo_code').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#invivo_code_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#herme_code').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#herme_code_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#scene').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#scene_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode=str_replace('<%%COMBO(author)%%>', $combo_author->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(author)%%>', $combo_author->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(author)%%>', urlencode($combo_author->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(bibliography)%%>', $combo_bibliography->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(bibliography)%%>', $combo_bibliography->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(bibliography)%%>', urlencode($combo_bibliography->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(transcript)%%>', $combo_transcript->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(transcript)%%>', $combo_transcript->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(transcript)%%>', urlencode($combo_transcript->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(token_sequence)%%>', $combo_token_sequence->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(token_sequence)%%>', $combo_token_sequence->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(token_sequence)%%>', urlencode($combo_token_sequence->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(agent)%%>', $combo_agent->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(agent)%%>', $combo_agent->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(agent)%%>', urlencode($combo_agent->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(invivo_code)%%>', $combo_invivo_code->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(invivo_code)%%>', $combo_invivo_code->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(invivo_code)%%>', urlencode($combo_invivo_code->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(herme_code)%%>', $combo_herme_code->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(herme_code)%%>', $combo_herme_code->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(herme_code)%%>', urlencode($combo_herme_code->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(scene)%%>', $combo_scene->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(scene)%%>', $combo_scene->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(scene)%%>', urlencode($combo_scene->MatchText), $templateCode);

	// process foreign key links
	if($selected_id){
		$templateCode=str_replace('<%%PLINK(author)%%>', ($combo_author->SelectedData ? "<span id=\"biblio_author_plink1\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_author->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(bibliography)%%>', ($combo_bibliography->SelectedData ? "<span id=\"biblio_doc_plink2\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_doc_view.php?SelectedID=" . urlencode($combo_bibliography->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(transcript)%%>', ($combo_transcript->SelectedData ? "<span id=\"biblio_trascript_plink3\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_trascript_view.php?SelectedID=" . urlencode($combo_transcript->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(token_sequence)%%>', ($combo_token_sequence->SelectedData ? "<span id=\"biblio_token_plink4\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_token_view.php?SelectedID=" . urlencode($combo_token_sequence->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(agent)%%>', ($combo_agent->SelectedData ? "<span id=\"biblio_author_plink5\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_agent->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(invivo_code)%%>', ($combo_invivo_code->SelectedData ? "<span id=\"code_invivo_plink6\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_invivo_view.php?SelectedID=" . urlencode($combo_invivo_code->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(herme_code)%%>', ($combo_herme_code->SelectedData ? "<span id=\"code_herme_plink7\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_herme_view.php?SelectedID=" . urlencode($combo_herme_code->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(scene)%%>', ($combo_scene->SelectedData ? "<span id=\"code_encounter_scenes_plink8\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_encounter_scenes_view.php?SelectedID=" . urlencode($combo_scene->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
	}

	// process images
	$templateCode=str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(author)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(bibliography)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(transcript)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(token_sequence)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(agent)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(invivo_code)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(herme_code)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(scene)%%>', '', $templateCode);

	// process values
	if($selected_id){
		$templateCode=str_replace('<%%VALUE(id)%%>', htmlspecialchars($row['id'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		$templateCode=str_replace('<%%VALUE(author)%%>', htmlspecialchars($row['author'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(author)%%>', urlencode($urow['author']), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliography)%%>', htmlspecialchars($row['bibliography'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliography)%%>', urlencode($urow['bibliography']), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcript)%%>', htmlspecialchars($row['transcript'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		$templateCode=str_replace('<%%VALUE(token_sequence)%%>', htmlspecialchars($row['token_sequence'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token_sequence)%%>', urlencode($urow['token_sequence']), $templateCode);
		$templateCode=str_replace('<%%VALUE(agent)%%>', htmlspecialchars($row['agent'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agent)%%>', urlencode($urow['agent']), $templateCode);
		$templateCode=str_replace('<%%VALUE(invivo_code)%%>', htmlspecialchars($row['invivo_code'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(invivo_code)%%>', urlencode($urow['invivo_code']), $templateCode);
		$templateCode=str_replace('<%%VALUE(herme_code)%%>', htmlspecialchars($row['herme_code'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(herme_code)%%>', urlencode($urow['herme_code']), $templateCode);
		$templateCode=str_replace('<%%VALUE(scene)%%>', htmlspecialchars($row['scene'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(scene)%%>', urlencode($urow['scene']), $templateCode);
	}else{
		$templateCode=str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(author)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(author)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliography)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliography)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(token_sequence)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token_sequence)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(agent)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agent)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(invivo_code)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(invivo_code)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(herme_code)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(herme_code)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(scene)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(scene)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode=str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode=str_replace('<%%', '<!-- ', $templateCode);
	$templateCode=str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_POST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('[id^=\"{$name}_plink\"]').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode.="\ttoken_sequence_update_autofills$rnd1 = function(){\n";
	$templateCode.="\t\tnew Ajax.Request(\n";
	if($dvprint){
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=token_sequence&id='+encodeURIComponent('".addslashes($row['token_sequence'])."'),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get'}\n";
	}else{
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent(current_token_sequence{$rnd1}.value),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get', onCreate: function(){ \$('token_sequence$rnd1').disable(); \$('token_sequenceLoading').innerHTML='<img src=loading.gif align=top>'; }, onComplete: function(){".(($arrPerm[1] || (($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3)) ? "\$('token_sequence$rnd1').enable(); " : "\$('token_sequence$rnd1').disable(); ")."\$('token_sequenceLoading').innerHTML='';}}\n";
	}
	$templateCode.="\t\t);\n";
	$templateCode.="\t};\n";
	if(!$dvprint) $templateCode.="\tif(\$('token_sequence_caption') != undefined) \$('token_sequence_caption').onchange=token_sequence_update_autofills$rnd1;\n";

	$templateCode.="\tinvivo_code_update_autofills$rnd1 = function(){\n";
	$templateCode.="\t\tnew Ajax.Request(\n";
	if($dvprint){
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=invivo_code&id='+encodeURIComponent('".addslashes($row['invivo_code'])."'),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get'}\n";
	}else{
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=invivo_code&id=' + encodeURIComponent(current_invivo_code{$rnd1}.value),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get', onCreate: function(){ \$('invivo_code$rnd1').disable(); \$('invivo_codeLoading').innerHTML='<img src=loading.gif align=top>'; }, onComplete: function(){".(($arrPerm[1] || (($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3)) ? "\$('invivo_code$rnd1').enable(); " : "\$('invivo_code$rnd1').disable(); ")."\$('invivo_codeLoading').innerHTML='';}}\n";
	}
	$templateCode.="\t\t);\n";
	$templateCode.="\t};\n";
	if(!$dvprint) $templateCode.="\tif(\$('invivo_code_caption') != undefined) \$('invivo_code_caption').onchange=invivo_code_update_autofills$rnd1;\n";

	$templateCode.="\therme_code_update_autofills$rnd1 = function(){\n";
	$templateCode.="\t\tnew Ajax.Request(\n";
	if($dvprint){
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=herme_code&id='+encodeURIComponent('".addslashes($row['herme_code'])."'),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get'}\n";
	}else{
		$templateCode.="\t\t\t'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=herme_code&id=' + encodeURIComponent(current_herme_code{$rnd1}.value),\n";
		$templateCode.="\t\t\t{encoding: 'UTF-8', method: 'get', onCreate: function(){ \$('herme_code$rnd1').disable(); \$('herme_codeLoading').innerHTML='<img src=loading.gif align=top>'; }, onComplete: function(){".(($arrPerm[1] || (($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3)) ? "\$('herme_code$rnd1').enable(); " : "\$('herme_code$rnd1').disable(); ")."\$('herme_codeLoading').innerHTML='';}}\n";
	}
	$templateCode.="\t\t);\n";
	$templateCode.="\t};\n";
	if(!$dvprint) $templateCode.="\tif(\$('herme_code_caption') != undefined) \$('herme_code_caption').onchange=herme_code_update_autofills$rnd1;\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode=preg_replace('/blank.gif" rel="lightbox\[.*?\]"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	// hook: code_chrev_scenes_dv
	if(function_exists('code_chrev_scenes_dv')){
		$args=array();
		code_chrev_scenes_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>