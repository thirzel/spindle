<?php
// This script and data application were generated by AppGini 5.31
// Download AppGini for free from http://bigprof.com/appgini/download/

	$currDir=dirname(__FILE__);
	include("$currDir/defaultLang.php");
	include("$currDir/language.php");
	include("$currDir/lib.php");
	@include("$currDir/hooks/biblio_doc.php");
	include("$currDir/biblio_doc_dml.php");

	// mm: can the current member access this page?
	$perm=getTablePermissions('biblio_doc');
	if(!$perm[0]){
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout("window.location=\'index.php?signOut=1\'", 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = "biblio_doc";

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV=array(   
		"`biblio_doc`.`id`" => "id",
		"`biblio_doc`.`img`" => "img",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`), '') /* Author id */" => "author_id",
		"IF(    CHAR_LENGTH(`class_bibliography_type1`.`type`), CONCAT_WS('',   `class_bibliography_type1`.`type`), '') /* Document type */" => "type",
		"IF(    CHAR_LENGTH(`class_bibliography_genre1`.`genre`), CONCAT_WS('',   `class_bibliography_genre1`.`genre`), '') /* Genre */" => "genre",
		"`biblio_doc`.`created`" => "created",
		"`biblio_doc`.`published`" => "published",
		"`biblio_doc`.`title`" => "title",
		"`biblio_doc`.`subtitle`" => "subtitle",
		"`biblio_doc`.`publisher`" => "publisher",
		"`biblio_doc`.`location`" => "location",
		"`biblio_doc`.`citation`" => "citation",
		"`biblio_doc`.`description`" => "description",
		"`biblio_doc`.`source`" => "source",
		"`biblio_doc`.`medium`" => "medium",
		"IF(    CHAR_LENGTH(`class_language1`.`language`), CONCAT_WS('',   `class_language1`.`language`), '') /* Language */" => "language",
		"`biblio_doc`.`format`" => "format",
		"`biblio_doc`.`subject`" => "subject",
		"IF(    CHAR_LENGTH(`class_rights1`.`right`), CONCAT_WS('',   `class_rights1`.`right`), '') /* Rights */" => "rights",
		"`biblio_doc`.`rights_holder`" => "rights_holder",
		"`biblio_doc`.`data_evaluation`" => "data_evaluation",
		"`biblio_doc`.`authority_record`" => "authority_record",
		"IF(    CHAR_LENGTH(`class_authority_library1`.`authority_name`), CONCAT_WS('',   `class_authority_library1`.`authority_name`), '') /* Authority organization */" => "authority_organization",
		"`biblio_doc`.`pdf_book`" => "pdf_book",
		"`biblio_doc`.`ext_source`" => "ext_source"
	);
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = array(   
		1 => '`biblio_doc`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => 6,
		7 => '`biblio_doc`.`created`',
		8 => '`biblio_doc`.`published`',
		9 => 9,
		10 => 10,
		11 => 11,
		12 => 12,
		13 => 13,
		14 => 14,
		15 => 15,
		16 => 16,
		17 => 17,
		18 => 18,
		19 => 19,
		20 => 20,
		21 => 21,
		22 => 22,
		23 => 23,
		24 => 24,
		25 => 25,
		26 => 26
	);

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV=array(   
		"`biblio_doc`.`id`" => "id",
		"`biblio_doc`.`img`" => "img",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`), '') /* Author id */" => "author_id",
		"IF(    CHAR_LENGTH(`class_bibliography_type1`.`type`), CONCAT_WS('',   `class_bibliography_type1`.`type`), '') /* Document type */" => "type",
		"IF(    CHAR_LENGTH(`class_bibliography_genre1`.`genre`), CONCAT_WS('',   `class_bibliography_genre1`.`genre`), '') /* Genre */" => "genre",
		"`biblio_doc`.`created`" => "created",
		"`biblio_doc`.`published`" => "published",
		"`biblio_doc`.`title`" => "title",
		"`biblio_doc`.`subtitle`" => "subtitle",
		"`biblio_doc`.`publisher`" => "publisher",
		"`biblio_doc`.`location`" => "location",
		"`biblio_doc`.`citation`" => "citation",
		"`biblio_doc`.`description`" => "description",
		"`biblio_doc`.`source`" => "source",
		"`biblio_doc`.`medium`" => "medium",
		"IF(    CHAR_LENGTH(`class_language1`.`language`), CONCAT_WS('',   `class_language1`.`language`), '') /* Language */" => "language",
		"`biblio_doc`.`format`" => "format",
		"`biblio_doc`.`subject`" => "subject",
		"IF(    CHAR_LENGTH(`class_rights1`.`right`), CONCAT_WS('',   `class_rights1`.`right`), '') /* Rights */" => "rights",
		"`biblio_doc`.`rights_holder`" => "rights_holder",
		"`biblio_doc`.`data_evaluation`" => "data_evaluation",
		"`biblio_doc`.`authority_record`" => "authority_record",
		"IF(    CHAR_LENGTH(`class_authority_library1`.`authority_name`), CONCAT_WS('',   `class_authority_library1`.`authority_name`), '') /* Authority organization */" => "authority_organization",
		"`biblio_doc`.`pdf_book`" => "pdf_book",
		"`biblio_doc`.`ext_source`" => "ext_source"
	);
	// Fields that can be filtered
	$x->QueryFieldsFilters=array(   
		"`biblio_doc`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "Author name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`), '') /* Author id */" => "Author id",
		"IF(    CHAR_LENGTH(`class_bibliography_type1`.`type`), CONCAT_WS('',   `class_bibliography_type1`.`type`), '') /* Document type */" => "Document type",
		"IF(    CHAR_LENGTH(`class_bibliography_genre1`.`genre`), CONCAT_WS('',   `class_bibliography_genre1`.`genre`), '') /* Genre */" => "Genre",
		"`biblio_doc`.`created`" => "Created",
		"`biblio_doc`.`published`" => "Published",
		"`biblio_doc`.`title`" => "Title",
		"`biblio_doc`.`subtitle`" => "Subtitle",
		"`biblio_doc`.`publisher`" => "Publisher",
		"`biblio_doc`.`location`" => "Place of publication",
		"`biblio_doc`.`citation`" => "Citation",
		"`biblio_doc`.`description`" => "Description",
		"`biblio_doc`.`source`" => "Source",
		"`biblio_doc`.`medium`" => "Medium",
		"IF(    CHAR_LENGTH(`class_language1`.`language`), CONCAT_WS('',   `class_language1`.`language`), '') /* Language */" => "Language",
		"`biblio_doc`.`format`" => "Format",
		"`biblio_doc`.`subject`" => "Subject",
		"IF(    CHAR_LENGTH(`class_rights1`.`right`), CONCAT_WS('',   `class_rights1`.`right`), '') /* Rights */" => "Rights",
		"`biblio_doc`.`rights_holder`" => "Rights holder",
		"`biblio_doc`.`data_evaluation`" => "Data evaluation",
		"`biblio_doc`.`authority_record`" => "Authority records",
		"IF(    CHAR_LENGTH(`class_authority_library1`.`authority_name`), CONCAT_WS('',   `class_authority_library1`.`authority_name`), '') /* Authority organization */" => "Authority organization",
		"`biblio_doc`.`pdf_book`" => "Pdf book",
		"`biblio_doc`.`ext_source`" => "External source"
	);

	// Fields that can be quick searched
	$x->QueryFieldsQS=array(   
		"`biblio_doc`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`), '') /* Author id */" => "author_id",
		"IF(    CHAR_LENGTH(`class_bibliography_type1`.`type`), CONCAT_WS('',   `class_bibliography_type1`.`type`), '') /* Document type */" => "type",
		"IF(    CHAR_LENGTH(`class_bibliography_genre1`.`genre`), CONCAT_WS('',   `class_bibliography_genre1`.`genre`), '') /* Genre */" => "genre",
		"`biblio_doc`.`created`" => "created",
		"`biblio_doc`.`published`" => "published",
		"`biblio_doc`.`title`" => "title",
		"`biblio_doc`.`subtitle`" => "subtitle",
		"`biblio_doc`.`publisher`" => "publisher",
		"`biblio_doc`.`location`" => "location",
		"`biblio_doc`.`citation`" => "citation",
		"`biblio_doc`.`description`" => "description",
		"`biblio_doc`.`source`" => "source",
		"`biblio_doc`.`medium`" => "medium",
		"IF(    CHAR_LENGTH(`class_language1`.`language`), CONCAT_WS('',   `class_language1`.`language`), '') /* Language */" => "language",
		"`biblio_doc`.`format`" => "format",
		"`biblio_doc`.`subject`" => "subject",
		"IF(    CHAR_LENGTH(`class_rights1`.`right`), CONCAT_WS('',   `class_rights1`.`right`), '') /* Rights */" => "rights",
		"`biblio_doc`.`rights_holder`" => "rights_holder",
		"`biblio_doc`.`data_evaluation`" => "data_evaluation",
		"`biblio_doc`.`authority_record`" => "authority_record",
		"IF(    CHAR_LENGTH(`class_authority_library1`.`authority_name`), CONCAT_WS('',   `class_authority_library1`.`authority_name`), '') /* Authority organization */" => "authority_organization",
		"`biblio_doc`.`pdf_book`" => "pdf_book",
		"`biblio_doc`.`ext_source`" => "ext_source"
	);

	// Lookup fields that can be used as filterers
	$x->filterers = array(  'author_name' => 'Author name', 'type' => 'Document type', 'genre' => 'Genre', 'language' => 'Language', 'rights' => 'Rights', 'authority_organization' => 'Authority organization');

	$x->QueryFrom="`biblio_doc` LEFT JOIN `biblio_author` as biblio_author1 ON `biblio_author1`.`id`=`biblio_doc`.`author_name` LEFT JOIN `class_bibliography_type` as class_bibliography_type1 ON `class_bibliography_type1`.`id`=`biblio_doc`.`type` LEFT JOIN `class_bibliography_genre` as class_bibliography_genre1 ON `class_bibliography_genre1`.`id`=`biblio_doc`.`genre` LEFT JOIN `class_language` as class_language1 ON `class_language1`.`id`=`biblio_doc`.`language` LEFT JOIN `class_rights` as class_rights1 ON `class_rights1`.`id`=`biblio_doc`.`rights` LEFT JOIN `class_authority_library` as class_authority_library1 ON `class_authority_library1`.`id`=`biblio_doc`.`authority_organization` ";
	$x->QueryWhere='';
	$x->QueryOrder='';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm[2]==0 ? 1 : 0);
	$x->AllowDelete = $perm[4];
	$x->AllowMassDelete = false;
	$x->AllowInsert = $perm[1];
	$x->AllowUpdate = $perm[3];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation["quick search"];
	$x->ScriptFileName = "biblio_doc_view.php";
	$x->RedirectAfterInsert = "biblio_doc_view.php";
	$x->TableTitle = "Bibliography";
	$x->TableIcon = "table.gif";
	$x->PrimaryKey = "`biblio_doc`.`id`";

	$x->ColWidth   = array(  150, 150, 150, 150, 150, 150, 150, 150, 150);
	$x->ColCaption = array("id", "Img", "Author name", "Published", "Title", "Publisher", "Place of publication", "Pdf book", "External source");
	$x->ColFieldName = array('id', 'img', 'author_name', 'published', 'title', 'publisher', 'location', 'pdf_book', 'ext_source');
	$x->ColNumber  = array(1, 2, 3, 8, 9, 11, 12, 25, 26);

	$x->Template = 'templates/biblio_doc_templateTV.html';
	$x->SelectedTemplate = 'templates/biblio_doc_templateTVS.html';
	$x->ShowTableHeader = 1;
	$x->ShowRecordSlots = 0;
	$x->HighlightColor = '#FFF0C2';

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, array('user', 'group'))){ $DisplayRecords = 'all'; }
	if($perm[2]==1 || ($perm[2]>1 && $DisplayRecords=='user' && !$_REQUEST['NoFilter_x'])){ // view owner only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `biblio_doc`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='biblio_doc' and lcase(membership_userrecords.memberID)='".getLoggedMemberID()."'";
	}elseif($perm[2]==2 || ($perm[2]>2 && $DisplayRecords=='group' && !$_REQUEST['NoFilter_x'])){ // view group only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `biblio_doc`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='biblio_doc' and membership_userrecords.groupID='".getLoggedGroupID()."'";
	}elseif($perm[2]==3){ // view all
		// no further action
	}elseif($perm[2]==0){ // view none
		$x->QueryFields = array("Not enough permissions" => "NEP");
		$x->QueryFrom = '`biblio_doc`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: biblio_doc_init
	$render=TRUE;
	if(function_exists('biblio_doc_init')){
		$args=array();
		$render=biblio_doc_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: biblio_doc_header
	$headerCode='';
	if(function_exists('biblio_doc_header')){
		$args=array();
		$headerCode=biblio_doc_header($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$headerCode){
		include_once("$currDir/header.php"); 
	}else{
		ob_start(); include_once("$currDir/header.php"); $dHeader=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%HEADER%%>', $dHeader, $headerCode);
	}

	echo $x->HTML;
	// hook: biblio_doc_footer
	$footerCode='';
	if(function_exists('biblio_doc_footer')){
		$args=array();
		$footerCode=biblio_doc_footer($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$footerCode){
		include_once("$currDir/footer.php"); 
	}else{
		ob_start(); include_once("$currDir/footer.php"); $dFooter=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%FOOTER%%>', $dFooter, $footerCode);
	}
?>