<?php

// Data functions for table biblio_token

// This script and data application were generated by AppGini 5.31
// Download AppGini for free from http://bigprof.com/appgini/download/

function biblio_token_insert(){
	global $Translation;

	if($_GET['insert_x']!=''){$_POST=$_GET;}

	// mm: can member insert record?
	$arrPerm=getTablePermissions('biblio_token');
	if(!$arrPerm[1]){
		return false;
	}

	$data['author'] = makeSafe($_POST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_POST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_POST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_POST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_POST['token']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }

	// hook: biblio_token_before_insert
	if(function_exists('biblio_token_before_insert')){
		$args=array();
		if(!biblio_token_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('insert into `biblio_token` set       `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"biblio_token_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID=db_insert_id(db_link());

	// hook: biblio_token_after_insert
	if(function_exists('biblio_token_after_insert')){
		$res = sql("select * from `biblio_token` where `id`='" . makeSafe($recID) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID);
		$args=array();
		if(!biblio_token_after_insert($data, getMemberInfo(), $args)){ return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID); }
	}

	// mm: save ownership data
	sql("insert into membership_userrecords set tableName='biblio_token', pkValue='$recID', memberID='".getLoggedMemberID()."', dateAdded='".time()."', dateUpdated='".time()."', groupID='".getLoggedGroupID()."'", $eo);

	return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID);
}

function biblio_token_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('biblio_token');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='biblio_token' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='biblio_token' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: biblio_token_before_delete
	if(function_exists('biblio_token_before_delete')){
		$args=array();
		if(!biblio_token_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	// child table: code_invivo
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_invivo` where `token_sequence`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_invivo", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_invivo", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: code_herme
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_herme` where `token_sequence`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_herme", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_herme", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: code_chrev_scenes
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_chrev_scenes` where `token_sequence`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_chrev_scenes", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_chrev_scenes", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: code_character_development
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_character_development` where `token`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_character_development", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_character_development", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: code_encounters
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_encounters` where `tokenA`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_encounters", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_encounters", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: code_encounters
	$res = sql("select `id` from `biblio_token` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `code_encounters` where `tokenB`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_encounters", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "code_encounters", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='biblio_token_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	sql("delete from `biblio_token` where `id`='$selected_id'", $eo);

	// hook: biblio_token_after_delete
	if(function_exists('biblio_token_after_delete')){
		$args=array();
		biblio_token_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='biblio_token' and pkValue='$selected_id'", $eo);
}

function biblio_token_update($selected_id){
	global $Translation;

	if($_GET['update_x']!=''){$_POST=$_GET;}

	// mm: can member edit record?
	$arrPerm=getTablePermissions('biblio_token');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='biblio_token' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='biblio_token' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['author'] = makeSafe($_POST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_POST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_POST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_POST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_POST['token']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: biblio_token_before_update
	if(function_exists('biblio_token_before_update')){
		$args=array();
		if(!biblio_token_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `biblio_token` set       `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="biblio_token_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: biblio_token_after_update
	if(function_exists('biblio_token_after_update')){
		$res = sql("SELECT * FROM `biblio_token` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!biblio_token_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='biblio_token' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function biblio_token_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('biblio_token');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_author = thisOr(undo_magic_quotes($_REQUEST['filterer_author']), '');
	$filterer_bibliography = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliography']), '');
	$filterer_transcript = thisOr(undo_magic_quotes($_REQUEST['filterer_transcript']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliography && !$filterer_author) $filterer_author = sqlValue("select author_name from biblio_doc where id='" . makeSafe($filterer_bibliography) . "'");
	if($filterer_transcript && !$filterer_author) $filterer_author = sqlValue("select author from biblio_trascript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_transcript && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography_title from biblio_trascript where id='" . makeSafe($filterer_transcript) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: author
	$combo_author = new DataCombo;
	// combobox: bibliography, filterable by: author
	$combo_bibliography = new DataCombo;
	// combobox: transcript, filterable by: author,bibliography
	$combo_transcript = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='biblio_token' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='biblio_token' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `biblio_token` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found']);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_author->SelectedData = $row['author'];
		$combo_bibliography->SelectedData = $row['bibliography'];
		$combo_transcript->SelectedData = $row['transcript'];
	}else{
		$combo_author->SelectedData = $filterer_author;
		$combo_bibliography->SelectedData = $filterer_bibliography;
		$combo_transcript->SelectedData = $filterer_transcript;
	}
	$combo_author->HTML = '<span id="author-container' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '">';
	$combo_author->MatchText = '<span id="author-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '">';
	$combo_bibliography->HTML = '<span id="bibliography-container' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '">';
	$combo_bibliography->MatchText = '<span id="bibliography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '">';
	$combo_transcript->HTML = '<span id="transcript-container' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '">';
	$combo_transcript->MatchText = '<span id="transcript-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		var current_author__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author'] : $filterer_author); ?>"};
		var current_bibliography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography'] : $filterer_bibliography); ?>"};
		var current_transcript__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcript'] : $filterer_transcript); ?>"};

		jQuery(function() {
			if(typeof(author_reload__RAND__) == 'function') author_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_reload__RAND__) == \'function\') bibliography_reload__RAND__(current_author__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcript_reload__RAND__) == \'function\') transcript_reload__RAND__(current_author__RAND__.value, current_bibliography__RAND__.value);' : ''); ?>
		});
		function author_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#author-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_author__RAND__.value, t: 'biblio_token', f: 'author' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="author"]').val(resp.results[0].id);
						jQuery('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(current_author__RAND__.value);

						if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'biblio_token', f: 'author' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_author__RAND__.value = e.added.id;
				current_author__RAND__.text = e.added.text;
				jQuery('[name="author"]').val(e.added.id);

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(current_author__RAND__.value);

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_author__RAND__.value, t: 'biblio_token', f: 'author' }
			}).done(function(resp){
				jQuery('[id=author-container__RAND__], [id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function bibliography_reload__RAND__(filterer_author){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#bibliography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, id: current_bibliography__RAND__.value, t: 'biblio_token', f: 'bibliography' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="bibliography"]').val(resp.results[0].id);
						jQuery('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($F('author'), current_bibliography__RAND__.value);

						if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, s: term, p: page, t: 'biblio_token', f: 'bibliography' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_bibliography__RAND__.value = e.added.id;
				current_bibliography__RAND__.text = e.added.text;
				jQuery('[name="bibliography"]').val(e.added.id);

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($F('author'), current_bibliography__RAND__.value);

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_bibliography__RAND__.value, t: 'biblio_token', f: 'bibliography' }
			}).done(function(resp){
				jQuery('[id=bibliography-container__RAND__], [id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function transcript_reload__RAND__(filterer_author, filterer_bibliography){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#transcript-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, id: current_transcript__RAND__.value, t: 'biblio_token', f: 'transcript' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="transcript"]').val(resp.results[0].id);
						jQuery('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');


						if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, s: term, p: page, t: 'biblio_token', f: 'transcript' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_transcript__RAND__.value = e.added.id;
				current_transcript__RAND__.text = e.added.text;
				jQuery('[name="transcript"]').val(e.added.id);


				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_transcript__RAND__.value, t: 'biblio_token', f: 'transcript' }
			}).done(function(resp){
				jQuery('[id=transcript-container__RAND__], [id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$templateCode = @file_get_contents('./templates/biblio_token_templateDVP.html');
	}else{
		$templateCode = @file_get_contents('./templates/biblio_token_templateDV.html');
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return biblio_token_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return biblio_token_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'window.parent.jQuery(\'.modal\').modal(\'hide\'); return false;';
	}else{
		$backAction = '$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode=str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return biblio_token_validateData();"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#author').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence').replaceWith('<p class=\"form-control-static\" id=\"token_sequence\">' + (jQuery('#token_sequence').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#token').replaceWith('<p class=\"form-control-static\" id=\"token\">' + (jQuery('#token').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode=str_replace('<%%COMBO(author)%%>', $combo_author->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(author)%%>', $combo_author->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(author)%%>', urlencode($combo_author->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(bibliography)%%>', $combo_bibliography->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(bibliography)%%>', $combo_bibliography->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(bibliography)%%>', urlencode($combo_bibliography->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(transcript)%%>', $combo_transcript->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(transcript)%%>', $combo_transcript->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(transcript)%%>', urlencode($combo_transcript->MatchText), $templateCode);

	// process foreign key links
	if($selected_id){
		$templateCode=str_replace('<%%PLINK(author)%%>', ($combo_author->SelectedData ? "<span id=\"biblio_author_plink1\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_author->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(bibliography)%%>', ($combo_bibliography->SelectedData ? "<span id=\"biblio_doc_plink2\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_doc_view.php?SelectedID=" . urlencode($combo_bibliography->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(transcript)%%>', ($combo_transcript->SelectedData ? "<span id=\"biblio_trascript_plink3\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_trascript_view.php?SelectedID=" . urlencode($combo_transcript->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
	}

	// process images
	$templateCode=str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(author)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(bibliography)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(transcript)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(token_sequence)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(token)%%>', '', $templateCode);

	// process values
	if($selected_id){
		$templateCode=str_replace('<%%VALUE(id)%%>', htmlspecialchars($row['id'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		$templateCode=str_replace('<%%VALUE(author)%%>', htmlspecialchars($row['author'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(author)%%>', urlencode($urow['author']), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliography)%%>', htmlspecialchars($row['bibliography'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliography)%%>', urlencode($urow['bibliography']), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcript)%%>', htmlspecialchars($row['transcript'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		$templateCode=str_replace('<%%VALUE(token_sequence)%%>', htmlspecialchars($row['token_sequence'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token_sequence)%%>', urlencode($urow['token_sequence']), $templateCode);
		$templateCode=str_replace('<%%VALUE(token)%%>', htmlspecialchars($row['token'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token)%%>', urlencode($urow['token']), $templateCode);
	}else{
		$templateCode=str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(author)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(author)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliography)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliography)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(token_sequence)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token_sequence)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(token)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(token)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode=str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode=str_replace('<%%', '<!-- ', $templateCode);
	$templateCode=str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_POST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('[id^=\"{$name}_plink\"]').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode=preg_replace('/blank.gif" rel="lightbox\[.*?\]"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	// hook: biblio_token_dv
	if(function_exists('biblio_token_dv')){
		$args=array();
		biblio_token_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>