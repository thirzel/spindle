<?php

// Data functions for table code_encounters

// This script and data application were generated by AppGini 5.31
// Download AppGini for free from http://bigprof.com/appgini/download/

function code_encounters_insert(){
	global $Translation;

	if($_GET['insert_x']!=''){$_POST=$_GET;}

	// mm: can member insert record?
	$arrPerm=getTablePermissions('code_encounters');
	if(!$arrPerm[1]){
		return false;
	}

	$data['agentA'] = makeSafe($_POST['agentA']);
		if($data['agentA'] == empty_lookup_value){ $data['agentA'] = ''; }
	$data['authorA'] = makeSafe($_POST['authorA']);
		if($data['authorA'] == empty_lookup_value){ $data['authorA'] = ''; }
	$data['bibliographyA'] = makeSafe($_POST['bibliographyA']);
		if($data['bibliographyA'] == empty_lookup_value){ $data['bibliographyA'] = ''; }
	$data['transcriptA'] = makeSafe($_POST['transcriptA']);
		if($data['transcriptA'] == empty_lookup_value){ $data['transcriptA'] = ''; }
	$data['tokenA'] = makeSafe($_POST['tokenA']);
		if($data['tokenA'] == empty_lookup_value){ $data['tokenA'] = ''; }
	$data['sceneA'] = makeSafe($_POST['sceneA']);
		if($data['sceneA'] == empty_lookup_value){ $data['sceneA'] = ''; }
	$data['agentB'] = makeSafe($_POST['agentB']);
		if($data['agentB'] == empty_lookup_value){ $data['agentB'] = ''; }
	$data['authorB'] = makeSafe($_POST['authorB']);
		if($data['authorB'] == empty_lookup_value){ $data['authorB'] = ''; }
	$data['bibliographyB'] = makeSafe($_POST['bibliographyB']);
		if($data['bibliographyB'] == empty_lookup_value){ $data['bibliographyB'] = ''; }
	$data['transcriptB'] = makeSafe($_POST['transcriptB']);
		if($data['transcriptB'] == empty_lookup_value){ $data['transcriptB'] = ''; }
	$data['tokenB'] = makeSafe($_POST['tokenB']);
		if($data['tokenB'] == empty_lookup_value){ $data['tokenB'] = ''; }
	$data['sceneB'] = makeSafe($_POST['sceneB']);
		if($data['sceneB'] == empty_lookup_value){ $data['sceneB'] = ''; }
	$data['type'] = makeSafe($_POST['type']);
		if($data['type'] == empty_lookup_value){ $data['type'] = ''; }
	$data['conflicttype'] = makeSafe($_POST['conflicttype']);
		if($data['conflicttype'] == empty_lookup_value){ $data['conflicttype'] = ''; }
	$data['story_scene'] = makeSafe($_POST['story_scene']);
		if($data['story_scene'] == empty_lookup_value){ $data['story_scene'] = ''; }
	$data['nd_color'] = makeSafe($_POST['nd_color']);
		if($data['nd_color'] == empty_lookup_value){ $data['nd_color'] = ''; }
	$data['nd_width'] = makeSafe($_POST['nd_width']);
		if($data['nd_width'] == empty_lookup_value){ $data['nd_width'] = ''; }
	$data['nd_style'] = makeSafe($_POST['nd_style']);
		if($data['nd_style'] == empty_lookup_value){ $data['nd_style'] = ''; }
	$data['nd_opacity'] = makeSafe($_POST['nd_opacity']);
		if($data['nd_opacity'] == empty_lookup_value){ $data['nd_opacity'] = ''; }
	$data['nd_visibility'] = makeSafe($_POST['nd_visibility']);
		if($data['nd_visibility'] == empty_lookup_value){ $data['nd_visibility'] = ''; }
	$data['lbl_lable'] = makeSafe($_POST['lbl_lable']);
		if($data['lbl_lable'] == empty_lookup_value){ $data['lbl_lable'] = ''; }
	$data['lbl_color'] = makeSafe($_POST['lbl_color']);
		if($data['lbl_color'] == empty_lookup_value){ $data['lbl_color'] = ''; }
	$data['lbl_size'] = makeSafe($_POST['lbl_size']);
		if($data['lbl_size'] == empty_lookup_value){ $data['lbl_size'] = ''; }

	// hook: code_encounters_before_insert
	if(function_exists('code_encounters_before_insert')){
		$args=array();
		if(!code_encounters_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('insert into `code_encounters` set       `agentA`=' . (($data['agentA'] !== '' && $data['agentA'] !== NULL) ? "'{$data['agentA']}'" : 'NULL') . ', `authorA`=' . (($data['authorA'] !== '' && $data['authorA'] !== NULL) ? "'{$data['authorA']}'" : 'NULL') . ', `bibliographyA`=' . (($data['bibliographyA'] !== '' && $data['bibliographyA'] !== NULL) ? "'{$data['bibliographyA']}'" : 'NULL') . ', `transcriptA`=' . (($data['transcriptA'] !== '' && $data['transcriptA'] !== NULL) ? "'{$data['transcriptA']}'" : 'NULL') . ', `tokenA`=' . (($data['tokenA'] !== '' && $data['tokenA'] !== NULL) ? "'{$data['tokenA']}'" : 'NULL') . ', `sceneA`=' . (($data['sceneA'] !== '' && $data['sceneA'] !== NULL) ? "'{$data['sceneA']}'" : 'NULL') . ', `agentB`=' . (($data['agentB'] !== '' && $data['agentB'] !== NULL) ? "'{$data['agentB']}'" : 'NULL') . ', `authorB`=' . (($data['authorB'] !== '' && $data['authorB'] !== NULL) ? "'{$data['authorB']}'" : 'NULL') . ', `bibliographyB`=' . (($data['bibliographyB'] !== '' && $data['bibliographyB'] !== NULL) ? "'{$data['bibliographyB']}'" : 'NULL') . ', `transcriptB`=' . (($data['transcriptB'] !== '' && $data['transcriptB'] !== NULL) ? "'{$data['transcriptB']}'" : 'NULL') . ', `tokenB`=' . (($data['tokenB'] !== '' && $data['tokenB'] !== NULL) ? "'{$data['tokenB']}'" : 'NULL') . ', `sceneB`=' . (($data['sceneB'] !== '' && $data['sceneB'] !== NULL) ? "'{$data['sceneB']}'" : 'NULL') . ', `type`=' . (($data['type'] !== '' && $data['type'] !== NULL) ? "'{$data['type']}'" : 'NULL') . ', `conflicttype`=' . (($data['conflicttype'] !== '' && $data['conflicttype'] !== NULL) ? "'{$data['conflicttype']}'" : 'NULL') . ', `story_scene`=' . (($data['story_scene'] !== '' && $data['story_scene'] !== NULL) ? "'{$data['story_scene']}'" : 'NULL') . ', `nd_color`=' . (($data['nd_color'] !== '' && $data['nd_color'] !== NULL) ? "'{$data['nd_color']}'" : 'NULL') . ', `nd_width`=' . (($data['nd_width'] !== '' && $data['nd_width'] !== NULL) ? "'{$data['nd_width']}'" : 'NULL') . ', `nd_style`=' . (($data['nd_style'] !== '' && $data['nd_style'] !== NULL) ? "'{$data['nd_style']}'" : 'NULL') . ', `nd_opacity`=' . (($data['nd_opacity'] !== '' && $data['nd_opacity'] !== NULL) ? "'{$data['nd_opacity']}'" : 'NULL') . ', `nd_visibility`=' . (($data['nd_visibility'] !== '' && $data['nd_visibility'] !== NULL) ? "'{$data['nd_visibility']}'" : 'NULL') . ', `lbl_lable`=' . (($data['lbl_lable'] !== '' && $data['lbl_lable'] !== NULL) ? "'{$data['lbl_lable']}'" : 'NULL') . ', `lbl_color`=' . (($data['lbl_color'] !== '' && $data['lbl_color'] !== NULL) ? "'{$data['lbl_color']}'" : 'NULL') . ', `lbl_size`=' . (($data['lbl_size'] !== '' && $data['lbl_size'] !== NULL) ? "'{$data['lbl_size']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"code_encounters_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID=db_insert_id(db_link());

	// hook: code_encounters_after_insert
	if(function_exists('code_encounters_after_insert')){
		$res = sql("select * from `code_encounters` where `id`='" . makeSafe($recID) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID);
		$args=array();
		if(!code_encounters_after_insert($data, getMemberInfo(), $args)){ return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID); }
	}

	// mm: save ownership data
	sql("insert into membership_userrecords set tableName='code_encounters', pkValue='$recID', memberID='".getLoggedMemberID()."', dateAdded='".time()."', dateUpdated='".time()."', groupID='".getLoggedGroupID()."'", $eo);

	return (get_magic_quotes_gpc() ? stripslashes($recID) : $recID);
}

function code_encounters_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('code_encounters');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_encounters' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_encounters' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: code_encounters_before_delete
	if(function_exists('code_encounters_before_delete')){
		$args=array();
		if(!code_encounters_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	// child table: storylines
	$res = sql("select `id` from `code_encounters` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `storylines` where `characterevent_scene`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storylines", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storylines", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='code_encounters_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='code_encounters_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	sql("delete from `code_encounters` where `id`='$selected_id'", $eo);

	// hook: code_encounters_after_delete
	if(function_exists('code_encounters_after_delete')){
		$args=array();
		code_encounters_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='code_encounters' and pkValue='$selected_id'", $eo);
}

function code_encounters_update($selected_id){
	global $Translation;

	if($_GET['update_x']!=''){$_POST=$_GET;}

	// mm: can member edit record?
	$arrPerm=getTablePermissions('code_encounters');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_encounters' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_encounters' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['agentA'] = makeSafe($_POST['agentA']);
		if($data['agentA'] == empty_lookup_value){ $data['agentA'] = ''; }
	$data['authorA'] = makeSafe($_POST['authorA']);
		if($data['authorA'] == empty_lookup_value){ $data['authorA'] = ''; }
	$data['bibliographyA'] = makeSafe($_POST['bibliographyA']);
		if($data['bibliographyA'] == empty_lookup_value){ $data['bibliographyA'] = ''; }
	$data['transcriptA'] = makeSafe($_POST['transcriptA']);
		if($data['transcriptA'] == empty_lookup_value){ $data['transcriptA'] = ''; }
	$data['tokenA'] = makeSafe($_POST['tokenA']);
		if($data['tokenA'] == empty_lookup_value){ $data['tokenA'] = ''; }
	$data['sceneA'] = makeSafe($_POST['sceneA']);
		if($data['sceneA'] == empty_lookup_value){ $data['sceneA'] = ''; }
	$data['agentB'] = makeSafe($_POST['agentB']);
		if($data['agentB'] == empty_lookup_value){ $data['agentB'] = ''; }
	$data['authorB'] = makeSafe($_POST['authorB']);
		if($data['authorB'] == empty_lookup_value){ $data['authorB'] = ''; }
	$data['bibliographyB'] = makeSafe($_POST['bibliographyB']);
		if($data['bibliographyB'] == empty_lookup_value){ $data['bibliographyB'] = ''; }
	$data['transcriptB'] = makeSafe($_POST['transcriptB']);
		if($data['transcriptB'] == empty_lookup_value){ $data['transcriptB'] = ''; }
	$data['tokenB'] = makeSafe($_POST['tokenB']);
		if($data['tokenB'] == empty_lookup_value){ $data['tokenB'] = ''; }
	$data['sceneB'] = makeSafe($_POST['sceneB']);
		if($data['sceneB'] == empty_lookup_value){ $data['sceneB'] = ''; }
	$data['type'] = makeSafe($_POST['type']);
		if($data['type'] == empty_lookup_value){ $data['type'] = ''; }
	$data['conflicttype'] = makeSafe($_POST['conflicttype']);
		if($data['conflicttype'] == empty_lookup_value){ $data['conflicttype'] = ''; }
	$data['story_scene'] = makeSafe($_POST['story_scene']);
		if($data['story_scene'] == empty_lookup_value){ $data['story_scene'] = ''; }
	$data['nd_color'] = makeSafe($_POST['nd_color']);
		if($data['nd_color'] == empty_lookup_value){ $data['nd_color'] = ''; }
	$data['nd_width'] = makeSafe($_POST['nd_width']);
		if($data['nd_width'] == empty_lookup_value){ $data['nd_width'] = ''; }
	$data['nd_style'] = makeSafe($_POST['nd_style']);
		if($data['nd_style'] == empty_lookup_value){ $data['nd_style'] = ''; }
	$data['nd_opacity'] = makeSafe($_POST['nd_opacity']);
		if($data['nd_opacity'] == empty_lookup_value){ $data['nd_opacity'] = ''; }
	$data['nd_visibility'] = makeSafe($_POST['nd_visibility']);
		if($data['nd_visibility'] == empty_lookup_value){ $data['nd_visibility'] = ''; }
	$data['lbl_lable'] = makeSafe($_POST['lbl_lable']);
		if($data['lbl_lable'] == empty_lookup_value){ $data['lbl_lable'] = ''; }
	$data['lbl_color'] = makeSafe($_POST['lbl_color']);
		if($data['lbl_color'] == empty_lookup_value){ $data['lbl_color'] = ''; }
	$data['lbl_size'] = makeSafe($_POST['lbl_size']);
		if($data['lbl_size'] == empty_lookup_value){ $data['lbl_size'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: code_encounters_before_update
	if(function_exists('code_encounters_before_update')){
		$args=array();
		if(!code_encounters_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `code_encounters` set       `agentA`=' . (($data['agentA'] !== '' && $data['agentA'] !== NULL) ? "'{$data['agentA']}'" : 'NULL') . ', `authorA`=' . (($data['authorA'] !== '' && $data['authorA'] !== NULL) ? "'{$data['authorA']}'" : 'NULL') . ', `bibliographyA`=' . (($data['bibliographyA'] !== '' && $data['bibliographyA'] !== NULL) ? "'{$data['bibliographyA']}'" : 'NULL') . ', `transcriptA`=' . (($data['transcriptA'] !== '' && $data['transcriptA'] !== NULL) ? "'{$data['transcriptA']}'" : 'NULL') . ', `tokenA`=' . (($data['tokenA'] !== '' && $data['tokenA'] !== NULL) ? "'{$data['tokenA']}'" : 'NULL') . ', `sceneA`=' . (($data['sceneA'] !== '' && $data['sceneA'] !== NULL) ? "'{$data['sceneA']}'" : 'NULL') . ', `agentB`=' . (($data['agentB'] !== '' && $data['agentB'] !== NULL) ? "'{$data['agentB']}'" : 'NULL') . ', `authorB`=' . (($data['authorB'] !== '' && $data['authorB'] !== NULL) ? "'{$data['authorB']}'" : 'NULL') . ', `bibliographyB`=' . (($data['bibliographyB'] !== '' && $data['bibliographyB'] !== NULL) ? "'{$data['bibliographyB']}'" : 'NULL') . ', `transcriptB`=' . (($data['transcriptB'] !== '' && $data['transcriptB'] !== NULL) ? "'{$data['transcriptB']}'" : 'NULL') . ', `tokenB`=' . (($data['tokenB'] !== '' && $data['tokenB'] !== NULL) ? "'{$data['tokenB']}'" : 'NULL') . ', `sceneB`=' . (($data['sceneB'] !== '' && $data['sceneB'] !== NULL) ? "'{$data['sceneB']}'" : 'NULL') . ', `type`=' . (($data['type'] !== '' && $data['type'] !== NULL) ? "'{$data['type']}'" : 'NULL') . ', `conflicttype`=' . (($data['conflicttype'] !== '' && $data['conflicttype'] !== NULL) ? "'{$data['conflicttype']}'" : 'NULL') . ', `story_scene`=' . (($data['story_scene'] !== '' && $data['story_scene'] !== NULL) ? "'{$data['story_scene']}'" : 'NULL') . ', `nd_color`=' . (($data['nd_color'] !== '' && $data['nd_color'] !== NULL) ? "'{$data['nd_color']}'" : 'NULL') . ', `nd_width`=' . (($data['nd_width'] !== '' && $data['nd_width'] !== NULL) ? "'{$data['nd_width']}'" : 'NULL') . ', `nd_style`=' . (($data['nd_style'] !== '' && $data['nd_style'] !== NULL) ? "'{$data['nd_style']}'" : 'NULL') . ', `nd_opacity`=' . (($data['nd_opacity'] !== '' && $data['nd_opacity'] !== NULL) ? "'{$data['nd_opacity']}'" : 'NULL') . ', `nd_visibility`=' . (($data['nd_visibility'] !== '' && $data['nd_visibility'] !== NULL) ? "'{$data['nd_visibility']}'" : 'NULL') . ', `lbl_lable`=' . (($data['lbl_lable'] !== '' && $data['lbl_lable'] !== NULL) ? "'{$data['lbl_lable']}'" : 'NULL') . ', `lbl_color`=' . (($data['lbl_color'] !== '' && $data['lbl_color'] !== NULL) ? "'{$data['lbl_color']}'" : 'NULL') . ', `lbl_size`=' . (($data['lbl_size'] !== '' && $data['lbl_size'] !== NULL) ? "'{$data['lbl_size']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="code_encounters_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: code_encounters_after_update
	if(function_exists('code_encounters_after_update')){
		$res = sql("SELECT * FROM `code_encounters` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!code_encounters_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='code_encounters' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function code_encounters_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('code_encounters');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_agentA = thisOr(undo_magic_quotes($_REQUEST['filterer_agentA']), '');
	$filterer_authorA = thisOr(undo_magic_quotes($_REQUEST['filterer_authorA']), '');
	$filterer_bibliographyA = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliographyA']), '');
	$filterer_transcriptA = thisOr(undo_magic_quotes($_REQUEST['filterer_transcriptA']), '');
	$filterer_tokenA = thisOr(undo_magic_quotes($_REQUEST['filterer_tokenA']), '');
	$filterer_sceneA = thisOr(undo_magic_quotes($_REQUEST['filterer_sceneA']), '');
	$filterer_agentB = thisOr(undo_magic_quotes($_REQUEST['filterer_agentB']), '');
	$filterer_authorB = thisOr(undo_magic_quotes($_REQUEST['filterer_authorB']), '');
	$filterer_bibliographyB = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliographyB']), '');
	$filterer_transcriptB = thisOr(undo_magic_quotes($_REQUEST['filterer_transcriptB']), '');
	$filterer_tokenB = thisOr(undo_magic_quotes($_REQUEST['filterer_tokenB']), '');
	$filterer_sceneB = thisOr(undo_magic_quotes($_REQUEST['filterer_sceneB']), '');
	$filterer_story_scene = thisOr(undo_magic_quotes($_REQUEST['filterer_story_scene']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliographyA && !$filterer_authorA) $filterer_authorA = sqlValue("select author_name from biblio_doc where id='" . makeSafe($filterer_bibliographyA) . "'");
	if($filterer_transcriptA && !$filterer_authorA) $filterer_authorA = sqlValue("select author from biblio_trascript where id='" . makeSafe($filterer_transcriptA) . "'");
	if($filterer_transcriptA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select bibliography_title from biblio_trascript where id='" . makeSafe($filterer_transcriptA) . "'");
	if($filterer_tokenA && !$filterer_authorA) $filterer_authorA = sqlValue("select author from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_tokenA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_tokenA && !$filterer_transcriptA) $filterer_transcriptA = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_sceneA && !$filterer_authorA) $filterer_authorA = sqlValue("select  from code_encounter_scenes where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select  from code_encounter_scenes where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_transcriptA) $filterer_transcriptA = sqlValue("select  from code_encounter_scenes where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_tokenA) $filterer_tokenA = sqlValue("select  from code_encounter_scenes where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_bibliographyB && !$filterer_authorB) $filterer_authorB = sqlValue("select author_name from biblio_doc where id='" . makeSafe($filterer_bibliographyB) . "'");
	if($filterer_transcriptB && !$filterer_authorB) $filterer_authorB = sqlValue("select author from biblio_trascript where id='" . makeSafe($filterer_transcriptB) . "'");
	if($filterer_transcriptB && !$filterer_bibliographyB) $filterer_bibliographyB = sqlValue("select bibliography_title from biblio_trascript where id='" . makeSafe($filterer_transcriptB) . "'");
	if($filterer_tokenB && !$filterer_authorB) $filterer_authorB = sqlValue("select author from biblio_token where id='" . makeSafe($filterer_tokenB) . "'");
	if($filterer_tokenB && !$filterer_bibliographyB) $filterer_bibliographyB = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_tokenB) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: agentA
	$combo_agentA = new DataCombo;
	// combobox: authorA
	$combo_authorA = new DataCombo;
	// combobox: bibliographyA, filterable by: authorA
	$combo_bibliographyA = new DataCombo;
	// combobox: transcriptA, filterable by: authorA,bibliographyA
	$combo_transcriptA = new DataCombo;
	// combobox: tokenA, filterable by: authorA,bibliographyA,transcriptA
	$combo_tokenA = new DataCombo;
	// combobox: sceneA, filterable by: authorA,bibliographyA,transcriptA,tokenA
	$combo_sceneA = new DataCombo;
	// combobox: agentB
	$combo_agentB = new DataCombo;
	// combobox: authorB
	$combo_authorB = new DataCombo;
	// combobox: bibliographyB, filterable by: authorB
	$combo_bibliographyB = new DataCombo;
	// combobox: transcriptB, filterable by: authorB,bibliographyB
	$combo_transcriptB = new DataCombo;
	// combobox: tokenB, filterable by: authorB,bibliographyB
	$combo_tokenB = new DataCombo;
	// combobox: sceneB
	$combo_sceneB = new DataCombo;
	// combobox: type
	$combo_type = new Combo;
	$combo_type->ListType = 0;
	$combo_type->MultipleSeparator = ', ';
	$combo_type->ListBoxHeight = 10;
	$combo_type->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/code_encounters.type.csv')){
		$type_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/code_encounters.type.csv')));
		$combo_type->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($type_data)));
		$combo_type->ListData = $combo_type->ListItem;
	}else{
		$combo_type->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("intro;; dismissal;; interaction")));
		$combo_type->ListData = $combo_type->ListItem;
	}
	$combo_type->SelectName = 'type';
	// combobox: conflicttype
	$combo_conflicttype = new Combo;
	$combo_conflicttype->ListType = 0;
	$combo_conflicttype->MultipleSeparator = ', ';
	$combo_conflicttype->ListBoxHeight = 10;
	$combo_conflicttype->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/code_encounters.conflicttype.csv')){
		$conflicttype_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/code_encounters.conflicttype.csv')));
		$combo_conflicttype->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($conflicttype_data)));
		$combo_conflicttype->ListData = $combo_conflicttype->ListItem;
	}else{
		$combo_conflicttype->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("setup;; conflict;; resolution")));
		$combo_conflicttype->ListData = $combo_conflicttype->ListItem;
	}
	$combo_conflicttype->SelectName = 'conflicttype';
	// combobox: story_scene
	$combo_story_scene = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_encounters' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_encounters' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `code_encounters` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found']);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_agentA->SelectedData = $row['agentA'];
		$combo_authorA->SelectedData = $row['authorA'];
		$combo_bibliographyA->SelectedData = $row['bibliographyA'];
		$combo_transcriptA->SelectedData = $row['transcriptA'];
		$combo_tokenA->SelectedData = $row['tokenA'];
		$combo_sceneA->SelectedData = $row['sceneA'];
		$combo_agentB->SelectedData = $row['agentB'];
		$combo_authorB->SelectedData = $row['authorB'];
		$combo_bibliographyB->SelectedData = $row['bibliographyB'];
		$combo_transcriptB->SelectedData = $row['transcriptB'];
		$combo_tokenB->SelectedData = $row['tokenB'];
		$combo_sceneB->SelectedData = $row['sceneB'];
		$combo_type->SelectedData = $row['type'];
		$combo_conflicttype->SelectedData = $row['conflicttype'];
		$combo_story_scene->SelectedData = $row['story_scene'];
	}else{
		$combo_agentA->SelectedData = $filterer_agentA;
		$combo_authorA->SelectedData = $filterer_authorA;
		$combo_bibliographyA->SelectedData = $filterer_bibliographyA;
		$combo_transcriptA->SelectedData = $filterer_transcriptA;
		$combo_tokenA->SelectedData = $filterer_tokenA;
		$combo_sceneA->SelectedData = $filterer_sceneA;
		$combo_agentB->SelectedData = $filterer_agentB;
		$combo_authorB->SelectedData = $filterer_authorB;
		$combo_bibliographyB->SelectedData = $filterer_bibliographyB;
		$combo_transcriptB->SelectedData = $filterer_transcriptB;
		$combo_tokenB->SelectedData = $filterer_tokenB;
		$combo_sceneB->SelectedData = $filterer_sceneB;
		$combo_type->SelectedText = ( $_REQUEST['FilterField'][1]=='14' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_conflicttype->SelectedText = ( $_REQUEST['FilterField'][1]=='15' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_story_scene->SelectedData = $filterer_story_scene;
	}
	$combo_agentA->HTML = '<span id="agentA-container' . $rnd1 . '"></span><input type="hidden" name="agentA" id="agentA' . $rnd1 . '">';
	$combo_agentA->MatchText = '<span id="agentA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="agentA" id="agentA' . $rnd1 . '">';
	$combo_authorA->HTML = '<span id="authorA-container' . $rnd1 . '"></span><input type="hidden" name="authorA" id="authorA' . $rnd1 . '">';
	$combo_authorA->MatchText = '<span id="authorA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authorA" id="authorA' . $rnd1 . '">';
	$combo_bibliographyA->HTML = '<span id="bibliographyA-container' . $rnd1 . '"></span><input type="hidden" name="bibliographyA" id="bibliographyA' . $rnd1 . '">';
	$combo_bibliographyA->MatchText = '<span id="bibliographyA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliographyA" id="bibliographyA' . $rnd1 . '">';
	$combo_transcriptA->HTML = '<span id="transcriptA-container' . $rnd1 . '"></span><input type="hidden" name="transcriptA" id="transcriptA' . $rnd1 . '">';
	$combo_transcriptA->MatchText = '<span id="transcriptA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcriptA" id="transcriptA' . $rnd1 . '">';
	$combo_tokenA->HTML = '<span id="tokenA-container' . $rnd1 . '"></span><input type="hidden" name="tokenA" id="tokenA' . $rnd1 . '">';
	$combo_tokenA->MatchText = '<span id="tokenA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="tokenA" id="tokenA' . $rnd1 . '">';
	$combo_sceneA->HTML = '<span id="sceneA-container' . $rnd1 . '"></span><input type="hidden" name="sceneA" id="sceneA' . $rnd1 . '">';
	$combo_sceneA->MatchText = '<span id="sceneA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="sceneA" id="sceneA' . $rnd1 . '">';
	$combo_agentB->HTML = '<span id="agentB-container' . $rnd1 . '"></span><input type="hidden" name="agentB" id="agentB' . $rnd1 . '">';
	$combo_agentB->MatchText = '<span id="agentB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="agentB" id="agentB' . $rnd1 . '">';
	$combo_authorB->HTML = '<span id="authorB-container' . $rnd1 . '"></span><input type="hidden" name="authorB" id="authorB' . $rnd1 . '">';
	$combo_authorB->MatchText = '<span id="authorB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authorB" id="authorB' . $rnd1 . '">';
	$combo_bibliographyB->HTML = '<span id="bibliographyB-container' . $rnd1 . '"></span><input type="hidden" name="bibliographyB" id="bibliographyB' . $rnd1 . '">';
	$combo_bibliographyB->MatchText = '<span id="bibliographyB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliographyB" id="bibliographyB' . $rnd1 . '">';
	$combo_transcriptB->HTML = '<span id="transcriptB-container' . $rnd1 . '"></span><input type="hidden" name="transcriptB" id="transcriptB' . $rnd1 . '">';
	$combo_transcriptB->MatchText = '<span id="transcriptB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcriptB" id="transcriptB' . $rnd1 . '">';
	$combo_tokenB->HTML = '<span id="tokenB-container' . $rnd1 . '"></span><input type="hidden" name="tokenB" id="tokenB' . $rnd1 . '">';
	$combo_tokenB->MatchText = '<span id="tokenB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="tokenB" id="tokenB' . $rnd1 . '">';
	$combo_sceneB->HTML = '<span id="sceneB-container' . $rnd1 . '"></span><input type="hidden" name="sceneB" id="sceneB' . $rnd1 . '">';
	$combo_sceneB->MatchText = '<span id="sceneB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="sceneB" id="sceneB' . $rnd1 . '">';
	$combo_type->Render();
	$combo_conflicttype->Render();
	$combo_story_scene->HTML = '<span id="story_scene-container' . $rnd1 . '"></span><input type="hidden" name="story_scene" id="story_scene' . $rnd1 . '">';
	$combo_story_scene->MatchText = '<span id="story_scene-container-readonly' . $rnd1 . '"></span><input type="hidden" name="story_scene" id="story_scene' . $rnd1 . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		var current_agentA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['agentA'] : $filterer_agentA); ?>"};
		var current_authorA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authorA'] : $filterer_authorA); ?>"};
		var current_bibliographyA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliographyA'] : $filterer_bibliographyA); ?>"};
		var current_transcriptA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcriptA'] : $filterer_transcriptA); ?>"};
		var current_tokenA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['tokenA'] : $filterer_tokenA); ?>"};
		var current_sceneA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['sceneA'] : $filterer_sceneA); ?>"};
		var current_agentB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['agentB'] : $filterer_agentB); ?>"};
		var current_authorB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authorB'] : $filterer_authorB); ?>"};
		var current_bibliographyB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliographyB'] : $filterer_bibliographyB); ?>"};
		var current_transcriptB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcriptB'] : $filterer_transcriptB); ?>"};
		var current_tokenB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['tokenB'] : $filterer_tokenB); ?>"};
		var current_sceneB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['sceneB'] : $filterer_sceneB); ?>"};
		var current_story_scene__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['story_scene'] : $filterer_story_scene); ?>"};

		jQuery(function() {
			if(typeof(agentA_reload__RAND__) == 'function') agentA_reload__RAND__();
			if(typeof(authorA_reload__RAND__) == 'function') authorA_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliographyA_reload__RAND__) == \'function\') bibliographyA_reload__RAND__(current_authorA__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcriptA_reload__RAND__) == \'function\') transcriptA_reload__RAND__(current_authorA__RAND__.value, current_bibliographyA__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(tokenA_reload__RAND__) == \'function\') tokenA_reload__RAND__(current_authorA__RAND__.value, current_bibliographyA__RAND__.value, current_transcriptA__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(sceneA_reload__RAND__) == \'function\') sceneA_reload__RAND__(current_authorA__RAND__.value, current_bibliographyA__RAND__.value, current_transcriptA__RAND__.value, current_tokenA__RAND__.value);' : ''); ?>
			if(typeof(agentB_reload__RAND__) == 'function') agentB_reload__RAND__();
			if(typeof(authorB_reload__RAND__) == 'function') authorB_reload__RAND__();
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliographyB_reload__RAND__) == \'function\') bibliographyB_reload__RAND__(current_authorB__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcriptB_reload__RAND__) == \'function\') transcriptB_reload__RAND__(current_authorB__RAND__.value, current_bibliographyB__RAND__.value);' : ''); ?>
			<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(tokenB_reload__RAND__) == \'function\') tokenB_reload__RAND__(current_authorB__RAND__.value, current_bibliographyB__RAND__.value);' : ''); ?>
			if(typeof(sceneB_reload__RAND__) == 'function') sceneB_reload__RAND__();
			if(typeof(story_scene_reload__RAND__) == 'function') story_scene_reload__RAND__();
		});
		function agentA_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#agentA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_agentA__RAND__.value, t: 'code_encounters', f: 'agentA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="agentA"]').val(resp.results[0].id);
						jQuery('[id=agentA-container-readonly__RAND__]').html('<span id="agentA-match-text">' + resp.results[0].text + '</span>');


						if(typeof(agentA_update_autofills__RAND__) == 'function') agentA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'agentA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_agentA__RAND__.value = e.added.id;
				current_agentA__RAND__.text = e.added.text;
				jQuery('[name="agentA"]').val(e.added.id);


				if(typeof(agentA_update_autofills__RAND__) == 'function') agentA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_agentA__RAND__.value, t: 'code_encounters', f: 'agentA' }
			}).done(function(resp){
				jQuery('[id=agentA-container__RAND__], [id=agentA-container-readonly__RAND__]').html('<span id="agentA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(agentA_update_autofills__RAND__) == 'function') agentA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function authorA_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#authorA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_authorA__RAND__.value, t: 'code_encounters', f: 'authorA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="authorA"]').val(resp.results[0].id);
						jQuery('[id=authorA-container-readonly__RAND__]').html('<span id="authorA-match-text">' + resp.results[0].text + '</span>');

						if(typeof(bibliographyA_reload__RAND__) == 'function') bibliographyA_reload__RAND__(current_authorA__RAND__.value);

						if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'authorA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_authorA__RAND__.value = e.added.id;
				current_authorA__RAND__.text = e.added.text;
				jQuery('[name="authorA"]').val(e.added.id);

						if(typeof(bibliographyA_reload__RAND__) == 'function') bibliographyA_reload__RAND__(current_authorA__RAND__.value);

				if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_authorA__RAND__.value, t: 'code_encounters', f: 'authorA' }
			}).done(function(resp){
				jQuery('[id=authorA-container__RAND__], [id=authorA-container-readonly__RAND__]').html('<span id="authorA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function bibliographyA_reload__RAND__(filterer_authorA){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#bibliographyA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, id: current_bibliographyA__RAND__.value, t: 'code_encounters', f: 'bibliographyA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="bibliographyA"]').val(resp.results[0].id);
						jQuery('[id=bibliographyA-container-readonly__RAND__]').html('<span id="bibliographyA-match-text">' + resp.results[0].text + '</span>');

						if(typeof(transcriptA_reload__RAND__) == 'function') transcriptA_reload__RAND__($F('authorA'), current_bibliographyA__RAND__.value);

						if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorA: filterer_authorA, s: term, p: page, t: 'code_encounters', f: 'bibliographyA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_bibliographyA__RAND__.value = e.added.id;
				current_bibliographyA__RAND__.text = e.added.text;
				jQuery('[name="bibliographyA"]').val(e.added.id);

						if(typeof(transcriptA_reload__RAND__) == 'function') transcriptA_reload__RAND__($F('authorA'), current_bibliographyA__RAND__.value);

				if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_bibliographyA__RAND__.value, t: 'code_encounters', f: 'bibliographyA' }
			}).done(function(resp){
				jQuery('[id=bibliographyA-container__RAND__], [id=bibliographyA-container-readonly__RAND__]').html('<span id="bibliographyA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function transcriptA_reload__RAND__(filterer_authorA, filterer_bibliographyA){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#transcriptA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, id: current_transcriptA__RAND__.value, t: 'code_encounters', f: 'transcriptA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="transcriptA"]').val(resp.results[0].id);
						jQuery('[id=transcriptA-container-readonly__RAND__]').html('<span id="transcriptA-match-text">' + resp.results[0].text + '</span>');

						if(typeof(tokenA_reload__RAND__) == 'function') tokenA_reload__RAND__($F('authorA'), $F('bibliographyA'), current_transcriptA__RAND__.value);

						if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, s: term, p: page, t: 'code_encounters', f: 'transcriptA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_transcriptA__RAND__.value = e.added.id;
				current_transcriptA__RAND__.text = e.added.text;
				jQuery('[name="transcriptA"]').val(e.added.id);

						if(typeof(tokenA_reload__RAND__) == 'function') tokenA_reload__RAND__($F('authorA'), $F('bibliographyA'), current_transcriptA__RAND__.value);

				if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_transcriptA__RAND__.value, t: 'code_encounters', f: 'transcriptA' }
			}).done(function(resp){
				jQuery('[id=transcriptA-container__RAND__], [id=transcriptA-container-readonly__RAND__]').html('<span id="transcriptA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function tokenA_reload__RAND__(filterer_authorA, filterer_bibliographyA, filterer_transcriptA){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#tokenA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, id: current_tokenA__RAND__.value, t: 'code_encounters', f: 'tokenA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="tokenA"]').val(resp.results[0].id);
						jQuery('[id=tokenA-container-readonly__RAND__]').html('<span id="tokenA-match-text">' + resp.results[0].text + '</span>');

						if(typeof(sceneA_reload__RAND__) == 'function') sceneA_reload__RAND__($F('authorA'), $F('bibliographyA'), $F('transcriptA'), current_tokenA__RAND__.value);

						if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, s: term, p: page, t: 'code_encounters', f: 'tokenA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_tokenA__RAND__.value = e.added.id;
				current_tokenA__RAND__.text = e.added.text;
				jQuery('[name="tokenA"]').val(e.added.id);

						if(typeof(sceneA_reload__RAND__) == 'function') sceneA_reload__RAND__($F('authorA'), $F('bibliographyA'), $F('transcriptA'), current_tokenA__RAND__.value);

				if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_tokenA__RAND__.value, t: 'code_encounters', f: 'tokenA' }
			}).done(function(resp){
				jQuery('[id=tokenA-container__RAND__], [id=tokenA-container-readonly__RAND__]').html('<span id="tokenA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function sceneA_reload__RAND__(filterer_authorA, filterer_bibliographyA, filterer_transcriptA, filterer_tokenA){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#sceneA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, filterer_tokenA: filterer_tokenA, id: current_sceneA__RAND__.value, t: 'code_encounters', f: 'sceneA' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="sceneA"]').val(resp.results[0].id);
						jQuery('[id=sceneA-container-readonly__RAND__]').html('<span id="sceneA-match-text">' + resp.results[0].text + '</span>');


						if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, filterer_tokenA: filterer_tokenA, s: term, p: page, t: 'code_encounters', f: 'sceneA' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_sceneA__RAND__.value = e.added.id;
				current_sceneA__RAND__.text = e.added.text;
				jQuery('[name="sceneA"]').val(e.added.id);


				if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_sceneA__RAND__.value, t: 'code_encounters', f: 'sceneA' }
			}).done(function(resp){
				jQuery('[id=sceneA-container__RAND__], [id=sceneA-container-readonly__RAND__]').html('<span id="sceneA-match-text">' + resp.results[0].text + '</span>');

				if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function agentB_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#agentB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_agentB__RAND__.value, t: 'code_encounters', f: 'agentB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="agentB"]').val(resp.results[0].id);
						jQuery('[id=agentB-container-readonly__RAND__]').html('<span id="agentB-match-text">' + resp.results[0].text + '</span>');


						if(typeof(agentB_update_autofills__RAND__) == 'function') agentB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'agentB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_agentB__RAND__.value = e.added.id;
				current_agentB__RAND__.text = e.added.text;
				jQuery('[name="agentB"]').val(e.added.id);


				if(typeof(agentB_update_autofills__RAND__) == 'function') agentB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_agentB__RAND__.value, t: 'code_encounters', f: 'agentB' }
			}).done(function(resp){
				jQuery('[id=agentB-container__RAND__], [id=agentB-container-readonly__RAND__]').html('<span id="agentB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(agentB_update_autofills__RAND__) == 'function') agentB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function authorB_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#authorB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_authorB__RAND__.value, t: 'code_encounters', f: 'authorB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="authorB"]').val(resp.results[0].id);
						jQuery('[id=authorB-container-readonly__RAND__]').html('<span id="authorB-match-text">' + resp.results[0].text + '</span>');

						if(typeof(bibliographyB_reload__RAND__) == 'function') bibliographyB_reload__RAND__(current_authorB__RAND__.value);

						if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'authorB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_authorB__RAND__.value = e.added.id;
				current_authorB__RAND__.text = e.added.text;
				jQuery('[name="authorB"]').val(e.added.id);

						if(typeof(bibliographyB_reload__RAND__) == 'function') bibliographyB_reload__RAND__(current_authorB__RAND__.value);

				if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_authorB__RAND__.value, t: 'code_encounters', f: 'authorB' }
			}).done(function(resp){
				jQuery('[id=authorB-container__RAND__], [id=authorB-container-readonly__RAND__]').html('<span id="authorB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function bibliographyB_reload__RAND__(filterer_authorB){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#bibliographyB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, id: current_bibliographyB__RAND__.value, t: 'code_encounters', f: 'bibliographyB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="bibliographyB"]').val(resp.results[0].id);
						jQuery('[id=bibliographyB-container-readonly__RAND__]').html('<span id="bibliographyB-match-text">' + resp.results[0].text + '</span>');

						if(typeof(transcriptB_reload__RAND__) == 'function') transcriptB_reload__RAND__($F('authorB'), current_bibliographyB__RAND__.value);
						if(typeof(tokenB_reload__RAND__) == 'function') tokenB_reload__RAND__($F('authorB'), current_bibliographyB__RAND__.value);

						if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorB: filterer_authorB, s: term, p: page, t: 'code_encounters', f: 'bibliographyB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_bibliographyB__RAND__.value = e.added.id;
				current_bibliographyB__RAND__.text = e.added.text;
				jQuery('[name="bibliographyB"]').val(e.added.id);

						if(typeof(transcriptB_reload__RAND__) == 'function') transcriptB_reload__RAND__($F('authorB'), current_bibliographyB__RAND__.value);
						if(typeof(tokenB_reload__RAND__) == 'function') tokenB_reload__RAND__($F('authorB'), current_bibliographyB__RAND__.value);

				if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_bibliographyB__RAND__.value, t: 'code_encounters', f: 'bibliographyB' }
			}).done(function(resp){
				jQuery('[id=bibliographyB-container__RAND__], [id=bibliographyB-container-readonly__RAND__]').html('<span id="bibliographyB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function transcriptB_reload__RAND__(filterer_authorB, filterer_bibliographyB){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#transcriptB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, filterer_bibliographyB: filterer_bibliographyB, id: current_transcriptB__RAND__.value, t: 'code_encounters', f: 'transcriptB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="transcriptB"]').val(resp.results[0].id);
						jQuery('[id=transcriptB-container-readonly__RAND__]').html('<span id="transcriptB-match-text">' + resp.results[0].text + '</span>');


						if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorB: filterer_authorB, filterer_bibliographyB: filterer_bibliographyB, s: term, p: page, t: 'code_encounters', f: 'transcriptB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_transcriptB__RAND__.value = e.added.id;
				current_transcriptB__RAND__.text = e.added.text;
				jQuery('[name="transcriptB"]').val(e.added.id);


				if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_transcriptB__RAND__.value, t: 'code_encounters', f: 'transcriptB' }
			}).done(function(resp){
				jQuery('[id=transcriptB-container__RAND__], [id=transcriptB-container-readonly__RAND__]').html('<span id="transcriptB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function tokenB_reload__RAND__(filterer_authorB, filterer_bibliographyB){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#tokenB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, filterer_bibliographyB: filterer_bibliographyB, id: current_tokenB__RAND__.value, t: 'code_encounters', f: 'tokenB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="tokenB"]').val(resp.results[0].id);
						jQuery('[id=tokenB-container-readonly__RAND__]').html('<span id="tokenB-match-text">' + resp.results[0].text + '</span>');


						if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { filterer_authorB: filterer_authorB, filterer_bibliographyB: filterer_bibliographyB, s: term, p: page, t: 'code_encounters', f: 'tokenB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_tokenB__RAND__.value = e.added.id;
				current_tokenB__RAND__.text = e.added.text;
				jQuery('[name="tokenB"]').val(e.added.id);


				if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_tokenB__RAND__.value, t: 'code_encounters', f: 'tokenB' }
			}).done(function(resp){
				jQuery('[id=tokenB-container__RAND__], [id=tokenB-container-readonly__RAND__]').html('<span id="tokenB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function sceneB_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#sceneB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_sceneB__RAND__.value, t: 'code_encounters', f: 'sceneB' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="sceneB"]').val(resp.results[0].id);
						jQuery('[id=sceneB-container-readonly__RAND__]').html('<span id="sceneB-match-text">' + resp.results[0].text + '</span>');


						if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'sceneB' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_sceneB__RAND__.value = e.added.id;
				current_sceneB__RAND__.text = e.added.text;
				jQuery('[name="sceneB"]').val(e.added.id);


				if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_sceneB__RAND__.value, t: 'code_encounters', f: 'sceneB' }
			}).done(function(resp){
				jQuery('[id=sceneB-container__RAND__], [id=sceneB-container-readonly__RAND__]').html('<span id="sceneB-match-text">' + resp.results[0].text + '</span>');

				if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
			});
		<?php } ?>

		}
		function story_scene_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			jQuery("#story_scene-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					jQuery.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: current_story_scene__RAND__.value, t: 'code_encounters', f: 'story_scene' }
					}).done(function(resp){
						c({
							id: resp.results[0].id,
							text: resp.results[0].text
						});
						jQuery('[name="story_scene"]').val(resp.results[0].id);
						jQuery('[id=story_scene-container-readonly__RAND__]').html('<span id="story_scene-match-text">' + resp.results[0].text + '</span>');


						if(typeof(story_scene_update_autofills__RAND__) == 'function') story_scene_update_autofills__RAND__();
					});
				},
				width: '100%',
				formatNoMatches: function(term){ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ return { s: term, p: page, t: 'code_encounters', f: 'story_scene' }; },
					results: function(resp, page){ return resp; }
				}
			}).on('change', function(e){
				current_story_scene__RAND__.value = e.added.id;
				current_story_scene__RAND__.text = e.added.text;
				jQuery('[name="story_scene"]').val(e.added.id);


				if(typeof(story_scene_update_autofills__RAND__) == 'function') story_scene_update_autofills__RAND__();
			});
		<?php }else{ ?>

			jQuery.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: current_story_scene__RAND__.value, t: 'code_encounters', f: 'story_scene' }
			}).done(function(resp){
				jQuery('[id=story_scene-container__RAND__], [id=story_scene-container-readonly__RAND__]').html('<span id="story_scene-match-text">' + resp.results[0].text + '</span>');

				if(typeof(story_scene_update_autofills__RAND__) == 'function') story_scene_update_autofills__RAND__();
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$templateCode = @file_get_contents('./templates/code_encounters_templateDVP.html');
	}else{
		$templateCode = @file_get_contents('./templates/code_encounters_templateDV.html');
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return code_encounters_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return code_encounters_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'window.parent.jQuery(\'.modal\').modal(\'hide\'); return false;';
	}else{
		$backAction = '$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode=str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return code_encounters_validateData();"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode=str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode=str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#agentA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#agentA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#authorA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authorA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tokenA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#tokenA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#sceneA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#sceneA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#agentB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#agentB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#authorB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authorB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tokenB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#tokenB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#sceneB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#sceneB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#type').replaceWith('<p class=\"form-control-static\" id=\"type\">' + (jQuery('#type').val() || '') + '</p>'); jQuery('#type-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#conflicttype').replaceWith('<p class=\"form-control-static\" id=\"conflicttype\">' + (jQuery('#conflicttype').val() || '') + '</p>'); jQuery('#conflicttype-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#story_scene').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#story_scene_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#nd_color').replaceWith('<p class=\"form-control-static\" id=\"nd_color\">' + (jQuery('#nd_color').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#nd_width').replaceWith('<p class=\"form-control-static\" id=\"nd_width\">' + (jQuery('#nd_width').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#nd_style').replaceWith('<p class=\"form-control-static\" id=\"nd_style\">' + (jQuery('#nd_style').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#nd_opacity').replaceWith('<p class=\"form-control-static\" id=\"nd_opacity\">' + (jQuery('#nd_opacity').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#nd_visibility').replaceWith('<p class=\"form-control-static\" id=\"nd_visibility\">' + (jQuery('#nd_visibility').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_lable').replaceWith('<p class=\"form-control-static\" id=\"lbl_lable\">' + (jQuery('#lbl_lable').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_color').replaceWith('<p class=\"form-control-static\" id=\"lbl_color\">' + (jQuery('#lbl_color').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_size').replaceWith('<p class=\"form-control-static\" id=\"lbl_size\">' + (jQuery('#lbl_size').val() || '') + '</p>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode=str_replace('<%%COMBO(agentA)%%>', $combo_agentA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(agentA)%%>', $combo_agentA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(agentA)%%>', urlencode($combo_agentA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(authorA)%%>', $combo_authorA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(authorA)%%>', $combo_authorA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(authorA)%%>', urlencode($combo_authorA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(bibliographyA)%%>', $combo_bibliographyA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(bibliographyA)%%>', $combo_bibliographyA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(bibliographyA)%%>', urlencode($combo_bibliographyA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(transcriptA)%%>', $combo_transcriptA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(transcriptA)%%>', $combo_transcriptA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(transcriptA)%%>', urlencode($combo_transcriptA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(tokenA)%%>', $combo_tokenA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(tokenA)%%>', $combo_tokenA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(tokenA)%%>', urlencode($combo_tokenA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(sceneA)%%>', $combo_sceneA->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(sceneA)%%>', $combo_sceneA->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(sceneA)%%>', urlencode($combo_sceneA->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(agentB)%%>', $combo_agentB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(agentB)%%>', $combo_agentB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(agentB)%%>', urlencode($combo_agentB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(authorB)%%>', $combo_authorB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(authorB)%%>', $combo_authorB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(authorB)%%>', urlencode($combo_authorB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(bibliographyB)%%>', $combo_bibliographyB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(bibliographyB)%%>', $combo_bibliographyB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(bibliographyB)%%>', urlencode($combo_bibliographyB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(transcriptB)%%>', $combo_transcriptB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(transcriptB)%%>', $combo_transcriptB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(transcriptB)%%>', urlencode($combo_transcriptB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(tokenB)%%>', $combo_tokenB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(tokenB)%%>', $combo_tokenB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(tokenB)%%>', urlencode($combo_tokenB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(sceneB)%%>', $combo_sceneB->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(sceneB)%%>', $combo_sceneB->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(sceneB)%%>', urlencode($combo_sceneB->MatchText), $templateCode);
	$templateCode=str_replace('<%%COMBO(type)%%>', $combo_type->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(type)%%>', $combo_type->SelectedData, $templateCode);
	$templateCode=str_replace('<%%COMBO(conflicttype)%%>', $combo_conflicttype->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(conflicttype)%%>', $combo_conflicttype->SelectedData, $templateCode);
	$templateCode=str_replace('<%%COMBO(story_scene)%%>', $combo_story_scene->HTML, $templateCode);
	$templateCode=str_replace('<%%COMBOTEXT(story_scene)%%>', $combo_story_scene->MatchText, $templateCode);
	$templateCode=str_replace('<%%URLCOMBOTEXT(story_scene)%%>', urlencode($combo_story_scene->MatchText), $templateCode);

	// process foreign key links
	if($selected_id){
		$templateCode=str_replace('<%%PLINK(agentA)%%>', ($combo_agentA->SelectedData ? "<span id=\"biblio_author_plink1\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_agentA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(authorA)%%>', ($combo_authorA->SelectedData ? "<span id=\"biblio_author_plink2\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_authorA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(bibliographyA)%%>', ($combo_bibliographyA->SelectedData ? "<span id=\"biblio_doc_plink3\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_doc_view.php?SelectedID=" . urlencode($combo_bibliographyA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(transcriptA)%%>', ($combo_transcriptA->SelectedData ? "<span id=\"biblio_trascript_plink4\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_trascript_view.php?SelectedID=" . urlencode($combo_transcriptA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(tokenA)%%>', ($combo_tokenA->SelectedData ? "<span id=\"biblio_token_plink5\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_token_view.php?SelectedID=" . urlencode($combo_tokenA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(sceneA)%%>', ($combo_sceneA->SelectedData ? "<span id=\"code_encounter_scenes_plink6\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_encounter_scenes_view.php?SelectedID=" . urlencode($combo_sceneA->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(agentB)%%>', ($combo_agentB->SelectedData ? "<span id=\"biblio_author_plink7\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_agentB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(authorB)%%>', ($combo_authorB->SelectedData ? "<span id=\"biblio_author_plink8\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_author_view.php?SelectedID=" . urlencode($combo_authorB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(bibliographyB)%%>', ($combo_bibliographyB->SelectedData ? "<span id=\"biblio_doc_plink9\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_doc_view.php?SelectedID=" . urlencode($combo_bibliographyB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(transcriptB)%%>', ($combo_transcriptB->SelectedData ? "<span id=\"biblio_trascript_plink10\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_trascript_view.php?SelectedID=" . urlencode($combo_transcriptB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(tokenB)%%>', ($combo_tokenB->SelectedData ? "<span id=\"biblio_token_plink11\" class=\"hidden\"><a class=\"btn btn-default\" href=\"biblio_token_view.php?SelectedID=" . urlencode($combo_tokenB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(sceneB)%%>', ($combo_sceneB->SelectedData ? "<span id=\"code_encounter_scenes_plink12\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_encounter_scenes_view.php?SelectedID=" . urlencode($combo_sceneB->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
		$templateCode=str_replace('<%%PLINK(story_scene)%%>', ($combo_story_scene->SelectedData ? "<span id=\"code_encounter_scenes_plink13\" class=\"hidden\"><a class=\"btn btn-default\" href=\"code_encounter_scenes_view.php?SelectedID=" . urlencode($combo_story_scene->SelectedData) . "\"><i class=\"glyphicon glyphicon-search\"></i></a></span>" : ''), $templateCode);
	}

	// process images
	$templateCode=str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(agentA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(authorA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(bibliographyA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(transcriptA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(tokenA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(sceneA)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(agentB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(authorB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(bibliographyB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(transcriptB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(tokenB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(sceneB)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(type)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(conflicttype)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(story_scene)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(nd_color)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(nd_width)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(nd_style)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(nd_opacity)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(nd_visibility)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(lbl_lable)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(lbl_color)%%>', '', $templateCode);
	$templateCode=str_replace('<%%UPLOADFILE(lbl_size)%%>', '', $templateCode);

	// process values
	if($selected_id){
		$templateCode=str_replace('<%%VALUE(id)%%>', htmlspecialchars($row['id'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		$templateCode=str_replace('<%%VALUE(agentA)%%>', htmlspecialchars($row['agentA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agentA)%%>', urlencode($urow['agentA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(authorA)%%>', htmlspecialchars($row['authorA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(authorA)%%>', urlencode($urow['authorA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliographyA)%%>', htmlspecialchars($row['bibliographyA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliographyA)%%>', urlencode($urow['bibliographyA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcriptA)%%>', htmlspecialchars($row['transcriptA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcriptA)%%>', urlencode($urow['transcriptA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(tokenA)%%>', htmlspecialchars($row['tokenA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(tokenA)%%>', urlencode($urow['tokenA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(sceneA)%%>', htmlspecialchars($row['sceneA'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(sceneA)%%>', urlencode($urow['sceneA']), $templateCode);
		$templateCode=str_replace('<%%VALUE(agentB)%%>', htmlspecialchars($row['agentB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agentB)%%>', urlencode($urow['agentB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(authorB)%%>', htmlspecialchars($row['authorB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(authorB)%%>', urlencode($urow['authorB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliographyB)%%>', htmlspecialchars($row['bibliographyB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliographyB)%%>', urlencode($urow['bibliographyB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcriptB)%%>', htmlspecialchars($row['transcriptB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcriptB)%%>', urlencode($urow['transcriptB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(tokenB)%%>', htmlspecialchars($row['tokenB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(tokenB)%%>', urlencode($urow['tokenB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(sceneB)%%>', htmlspecialchars($row['sceneB'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(sceneB)%%>', urlencode($urow['sceneB']), $templateCode);
		$templateCode=str_replace('<%%VALUE(type)%%>', htmlspecialchars($row['type'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(type)%%>', urlencode($urow['type']), $templateCode);
		$templateCode=str_replace('<%%VALUE(conflicttype)%%>', htmlspecialchars($row['conflicttype'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(conflicttype)%%>', urlencode($urow['conflicttype']), $templateCode);
		$templateCode=str_replace('<%%VALUE(story_scene)%%>', htmlspecialchars($row['story_scene'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(story_scene)%%>', urlencode($urow['story_scene']), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_color)%%>', htmlspecialchars($row['nd_color'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_color)%%>', urlencode($urow['nd_color']), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_width)%%>', htmlspecialchars($row['nd_width'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_width)%%>', urlencode($urow['nd_width']), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_style)%%>', htmlspecialchars($row['nd_style'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_style)%%>', urlencode($urow['nd_style']), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_opacity)%%>', htmlspecialchars($row['nd_opacity'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_opacity)%%>', urlencode($urow['nd_opacity']), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_visibility)%%>', htmlspecialchars($row['nd_visibility'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_visibility)%%>', urlencode($urow['nd_visibility']), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_lable)%%>', htmlspecialchars($row['lbl_lable'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_lable)%%>', urlencode($urow['lbl_lable']), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_color)%%>', htmlspecialchars($row['lbl_color'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_color)%%>', urlencode($urow['lbl_color']), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_size)%%>', htmlspecialchars($row['lbl_size'], ENT_QUOTES), $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_size)%%>', urlencode($urow['lbl_size']), $templateCode);
	}else{
		$templateCode=str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(agentA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agentA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(authorA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(authorA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliographyA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliographyA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcriptA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcriptA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(tokenA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(tokenA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(sceneA)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(sceneA)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(agentB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(agentB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(authorB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(authorB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(bibliographyB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(bibliographyB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(transcriptB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(transcriptB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(tokenB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(tokenB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(sceneB)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(sceneB)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(type)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(type)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(conflicttype)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(conflicttype)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(story_scene)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(story_scene)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_color)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_color)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_width)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_width)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_style)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_style)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_opacity)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_opacity)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(nd_visibility)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(nd_visibility)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_lable)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_lable)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_color)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_color)%%>', urlencode(''), $templateCode);
		$templateCode=str_replace('<%%VALUE(lbl_size)%%>', '', $templateCode);
		$templateCode=str_replace('<%%URLVALUE(lbl_size)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode=str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode=str_replace('<%%', '<!-- ', $templateCode);
	$templateCode=str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_POST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('[id^=\"{$name}_plink\"]').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode=preg_replace('/blank.gif" rel="lightbox\[.*?\]"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	// hook: code_encounters_dv
	if(function_exists('code_encounters_dv')){
		$args=array();
		code_encounters_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>