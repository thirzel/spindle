<?php
// This script and data application were generated by AppGini 5.31
// Download AppGini for free from http://bigprof.com/appgini/download/

	$currDir=dirname(__FILE__);
	include("$currDir/defaultLang.php");
	include("$currDir/language.php");
	include("$currDir/lib.php");
	@include("$currDir/hooks/code_character_development.php");
	include("$currDir/code_character_development_dml.php");

	// mm: can the current member access this page?
	$perm=getTablePermissions('code_character_development');
	if(!$perm[0]){
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout("window.location=\'index.php?signOut=1\'", 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = "code_character_development";

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV=array(   
		"`code_character_development`.`id`" => "id",
		"IF(    CHAR_LENGTH(`story1`.`id`) || CHAR_LENGTH(`story1`.`story`), CONCAT_WS('',   `story1`.`id`, '  ', `story1`.`story`), '') /* Story */" => "story",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Agent */" => "agent",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`) || CHAR_LENGTH(`story_characters1`.`character`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`, '- ', `story_characters1`.`character`), '') /* Story character */" => "story_character",
		"IF(    CHAR_LENGTH(`biblio_author2`.`memberID`) || CHAR_LENGTH(`biblio_author2`.`last_name`), CONCAT_WS('',   `biblio_author2`.`memberID`, ' - ', `biblio_author2`.`last_name`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '  ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_trascript1`.`trascriber_memberID`) || CHAR_LENGTH(`biblio_trascript1`.`transcript_title`), CONCAT_WS('',   `biblio_trascript1`.`trascriber_memberID`, ' - ', `biblio_trascript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`), CONCAT_WS('',   `biblio_token1`.`id`), '') /* Token sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"IF(    CHAR_LENGTH(`code_herme1`.`freecode`), CONCAT_WS('',   `code_herme1`.`freecode`), '') /* Code */" => "code",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"`code_character_development`.`character_elem_value`" => "character_elem_value",
		"`code_character_development`.`comment`" => "comment"
	);
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = array(   
		1 => '`code_character_development`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => 6,
		7 => 7,
		8 => 8,
		9 => 9,
		10 => 10,
		11 => 11,
		12 => '`code_character_development`.`character_elem_value`',
		13 => 13
	);

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV=array(   
		"`code_character_development`.`id`" => "id",
		"IF(    CHAR_LENGTH(`story1`.`id`) || CHAR_LENGTH(`story1`.`story`), CONCAT_WS('',   `story1`.`id`, '  ', `story1`.`story`), '') /* Story */" => "story",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Agent */" => "agent",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`) || CHAR_LENGTH(`story_characters1`.`character`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`, '- ', `story_characters1`.`character`), '') /* Story character */" => "story_character",
		"IF(    CHAR_LENGTH(`biblio_author2`.`memberID`) || CHAR_LENGTH(`biblio_author2`.`last_name`), CONCAT_WS('',   `biblio_author2`.`memberID`, ' - ', `biblio_author2`.`last_name`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '  ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_trascript1`.`trascriber_memberID`) || CHAR_LENGTH(`biblio_trascript1`.`transcript_title`), CONCAT_WS('',   `biblio_trascript1`.`trascriber_memberID`, ' - ', `biblio_trascript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`), CONCAT_WS('',   `biblio_token1`.`id`), '') /* Token sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"IF(    CHAR_LENGTH(`code_herme1`.`freecode`), CONCAT_WS('',   `code_herme1`.`freecode`), '') /* Code */" => "code",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"`code_character_development`.`character_elem_value`" => "character_elem_value",
		"`code_character_development`.`comment`" => "comment"
	);
	// Fields that can be filtered
	$x->QueryFieldsFilters=array(   
		"`code_character_development`.`id`" => "id",
		"IF(    CHAR_LENGTH(`story1`.`id`) || CHAR_LENGTH(`story1`.`story`), CONCAT_WS('',   `story1`.`id`, '  ', `story1`.`story`), '') /* Story */" => "Story",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Agent */" => "Agent",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`) || CHAR_LENGTH(`story_characters1`.`character`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`, '- ', `story_characters1`.`character`), '') /* Story character */" => "Story character",
		"IF(    CHAR_LENGTH(`biblio_author2`.`memberID`) || CHAR_LENGTH(`biblio_author2`.`last_name`), CONCAT_WS('',   `biblio_author2`.`memberID`, ' - ', `biblio_author2`.`last_name`), '') /* Author */" => "Author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '  ', `biblio_doc1`.`title`), '') /* Bibliography */" => "Bibliography",
		"IF(    CHAR_LENGTH(`biblio_trascript1`.`trascriber_memberID`) || CHAR_LENGTH(`biblio_trascript1`.`transcript_title`), CONCAT_WS('',   `biblio_trascript1`.`trascriber_memberID`, ' - ', `biblio_trascript1`.`transcript_title`), '') /* Transcript */" => "Transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`), CONCAT_WS('',   `biblio_token1`.`id`), '') /* Token sequence */" => "Token sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "Token",
		"IF(    CHAR_LENGTH(`code_herme1`.`freecode`), CONCAT_WS('',   `code_herme1`.`freecode`), '') /* Code */" => "Code",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "Character element",
		"`code_character_development`.`character_elem_value`" => "Value",
		"`code_character_development`.`comment`" => "Comment"
	);

	// Fields that can be quick searched
	$x->QueryFieldsQS=array(   
		"`code_character_development`.`id`" => "id",
		"IF(    CHAR_LENGTH(`story1`.`id`) || CHAR_LENGTH(`story1`.`story`), CONCAT_WS('',   `story1`.`id`, '  ', `story1`.`story`), '') /* Story */" => "story",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Agent */" => "agent",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`) || CHAR_LENGTH(`story_characters1`.`character`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`, '- ', `story_characters1`.`character`), '') /* Story character */" => "story_character",
		"IF(    CHAR_LENGTH(`biblio_author2`.`memberID`) || CHAR_LENGTH(`biblio_author2`.`last_name`), CONCAT_WS('',   `biblio_author2`.`memberID`, ' - ', `biblio_author2`.`last_name`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '  ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_trascript1`.`trascriber_memberID`) || CHAR_LENGTH(`biblio_trascript1`.`transcript_title`), CONCAT_WS('',   `biblio_trascript1`.`trascriber_memberID`, ' - ', `biblio_trascript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`), CONCAT_WS('',   `biblio_token1`.`id`), '') /* Token sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"IF(    CHAR_LENGTH(`code_herme1`.`freecode`), CONCAT_WS('',   `code_herme1`.`freecode`), '') /* Code */" => "code",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"`code_character_development`.`character_elem_value`" => "character_elem_value",
		"`code_character_development`.`comment`" => "comment"
	);

	// Lookup fields that can be used as filterers
	$x->filterers = array(  'story' => 'Story', 'agent' => 'Agent', 'author' => 'Author', 'bibliography' => 'Bibliography', 'transcript' => 'Transcript', 'token' => 'Token', 'code' => 'Code', 'character_element' => 'Character element');

	$x->QueryFrom="`code_character_development` LEFT JOIN `story` as story1 ON `story1`.`id`=`code_character_development`.`story` LEFT JOIN `story_characters` as story_characters1 ON `story_characters1`.`id`=`code_character_development`.`agent` LEFT JOIN `biblio_author` as biblio_author1 ON `biblio_author1`.`id`=`story_characters1`.`agent_name` LEFT JOIN `biblio_author` as biblio_author2 ON `biblio_author2`.`id`=`code_character_development`.`author` LEFT JOIN `biblio_doc` as biblio_doc1 ON `biblio_doc1`.`id`=`code_character_development`.`bibliography` LEFT JOIN `biblio_trascript` as biblio_trascript1 ON `biblio_trascript1`.`id`=`code_character_development`.`transcript` LEFT JOIN `biblio_token` as biblio_token1 ON `biblio_token1`.`id`=`code_character_development`.`token` LEFT JOIN `code_herme` as code_herme1 ON `code_herme1`.`id`=`code_character_development`.`code` LEFT JOIN `class_character_element` as class_character_element1 ON `class_character_element1`.`id`=`code_character_development`.`character_element` LEFT JOIN `class_dramatica_archetype` as class_dramatica_archetype1 ON `class_dramatica_archetype1`.`id`=`story_characters1`.`role` ";
	$x->QueryWhere='';
	$x->QueryOrder='';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm[2]==0 ? 1 : 0);
	$x->AllowDelete = $perm[4];
	$x->AllowMassDelete = false;
	$x->AllowInsert = $perm[1];
	$x->AllowUpdate = $perm[3];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation["quick search"];
	$x->ScriptFileName = "code_character_development_view.php";
	$x->RedirectAfterInsert = "code_character_development_view.php?SelectedID=#ID#";
	$x->TableTitle = "Character dev.";
	$x->TableIcon = "table.gif";
	$x->PrimaryKey = "`code_character_development`.`id`";

	$x->ColWidth   = array(  150, 150, 150, 150, 150, 150, 150, 150);
	$x->ColCaption = array("Story", "Agent", "Story character", "Token", "Code", "Character element", "Value", "Comment");
	$x->ColFieldName = array('story', 'agent', 'story_character', 'token', 'code', 'character_element', 'character_elem_value', 'comment');
	$x->ColNumber  = array(2, 3, 4, 9, 10, 11, 12, 13);

	$x->Template = 'templates/code_character_development_templateTV.html';
	$x->SelectedTemplate = 'templates/code_character_development_templateTVS.html';
	$x->ShowTableHeader = 1;
	$x->ShowRecordSlots = 0;
	$x->HighlightColor = '#FFF0C2';

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, array('user', 'group'))){ $DisplayRecords = 'all'; }
	if($perm[2]==1 || ($perm[2]>1 && $DisplayRecords=='user' && !$_REQUEST['NoFilter_x'])){ // view owner only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `code_character_development`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='code_character_development' and lcase(membership_userrecords.memberID)='".getLoggedMemberID()."'";
	}elseif($perm[2]==2 || ($perm[2]>2 && $DisplayRecords=='group' && !$_REQUEST['NoFilter_x'])){ // view group only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `code_character_development`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='code_character_development' and membership_userrecords.groupID='".getLoggedGroupID()."'";
	}elseif($perm[2]==3){ // view all
		// no further action
	}elseif($perm[2]==0){ // view none
		$x->QueryFields = array("Not enough permissions" => "NEP");
		$x->QueryFrom = '`code_character_development`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: code_character_development_init
	$render=TRUE;
	if(function_exists('code_character_development_init')){
		$args=array();
		$render=code_character_development_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: code_character_development_header
	$headerCode='';
	if(function_exists('code_character_development_header')){
		$args=array();
		$headerCode=code_character_development_header($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$headerCode){
		include_once("$currDir/header.php"); 
	}else{
		ob_start(); include_once("$currDir/header.php"); $dHeader=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%HEADER%%>', $dHeader, $headerCode);
	}

	echo $x->HTML;
	// hook: code_character_development_footer
	$footerCode='';
	if(function_exists('code_character_development_footer')){
		$args=array();
		$footerCode=code_character_development_footer($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$footerCode){
		include_once("$currDir/footer.php"); 
	}else{
		ob_start(); include_once("$currDir/footer.php"); $dFooter=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%FOOTER%%>', $dFooter, $footerCode);
	}
?>